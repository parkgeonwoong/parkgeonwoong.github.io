{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/01/12/hello-world/"},{"title":"4. HTTP 메서드","text":"📌 HTTP 메서드 📌 HTTP 메서드 ✅ HTTP API를 만들어보자 🔸 API URI 설계 🔸 리소스와 행위를 분리 ✅ HTTP 메서드 - GET, POST 🔹 GET 🔹 POST 🔸 POST는 요청 데이터를 어떻게 처리하는가? ✅ HTTP 메서드 - PUT, PATCH, DELETE 🔹 PUT 🔹 PATCH 🔹 DELETE ✅ HTTP 메서드의 속성 🔹 안전 🔹 멱등 🔹 캐시 가능 참고: https://velog.io/@dnstlr2933/HTTP-Method ✅ HTTP API를 만들어보자예시) 1234567# 요구사항 - 회원 정보 관리 API- 회원 목록 조회- 회원 등록- 회원 수정- 회원 삭제- 회원 조회 🔸 API URI 설계 먼저 요구사항에 대한 이름 만들기 좋은 URI 설계는?? → 가장 중요한 것은 리소스 식별 리소스의 의미는 뭘까? 회원을 등록하고 수정하고 조회하는게 리소스가 아니다 회원이라는 개념 자체가 리소스이다 리소스를 어떻게 식별하는게 좋을까? 회원이라는 리소스만 식별하면 된다 → 회원 리소스를 URI에 매핑 1234567회원 목록 조회 : /members회원 조회 : /members/{id}회원 등록 : /members/{id}회원 수정 : /members/{id}회원 삭제 : /members/{id}참고 : 계층 구조상 상위를 컬렉션으로 보고 복수형 단어 사용을 권장한다 (members) 🔸 리소스와 행위를 분리 URI는 리소스만 식별 (회원과 회원이 조회하는 행위를 분리) 리소스와 해당 리소스를 대상으로 하는 행위를 분리 리소스 : 회원 행위 : 조회, 등록, 삭제, 변경 리소스 = 명사, 행위 = 동사 행위(메서드)는 어떻게 구분하는가? → HTTP 메서드 ✅ HTTP 메서드 - GET, POST12345678910111213#🔹HTTP 메서드 종류- GET : 리소스 조회- POST : 요청 데이터 처리, 주로 등록에 사용- PUT : 리소스를 대체, 해당 리소스가 없으면 생성 - 폴더에 파일을 넣을때 있으면 덮어쓰고, 없으면 새로 만드는 것과 같다- PATCH : 리소스 부분 변경- DELETE : 리소스 삭제- HEAD : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환- OPTIONS : 대상 리소스에 대한 통신 가능 옵션을 설명( CORS에서 사용)- CONNECT : 대상 자원으로 식별 되는 서버에 대한 터널을 설정- TRACE : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행 🔹 GET 리소스 조회 서버에 전달하고 싶은 데이터는 query를 통해서 전달 이미지 참고 : https://catsbi.oopy.io/1b703a8f-9b02-4443-a28f-8ef3e2223f13 🔹 POST 요청 데이터 처리 메시지 바디를 통해 서버로 요청 데이터 전달 (클라 → 서버 ) 서버는 요청 데이터를 처리 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용 🔸 POST는 요청 데이터를 어떻게 처리하는가? POST → 대상 리소스가 리소스의 고유한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 요청 예를 들어 POST는 다음과 같은 기능에 사용 HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공하여 처리 예) HTML FORM에 입력한 정보로 회원 가입, 주문 등에서 사용 게시판, 뉴스그룹, 메일링 리스트, 블로그, 유사한 기사 그룹에 메시지 게시 예) 게시판 글쓰기, 댓글달기 서버가 아직 식별하지 않은 새 리소스 생성 예) 신규 주문 생성 기존 자원에 데이터 추가 예) 한 문서 끝에 내용 추가 정리: 이 리소스 URI에 POST 요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야한다 → 정해진 것이 없다 12345678# POST 정리**1. 새 리소스 생성(등록)** - 서버가 아직 식별하지 않은 새 리소스 생성**2. 요청 데이터 처리** - 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우 - 예) 주문에서 결제완료 -&gt; 배달 시작 -&gt; 배달완료 처럼 단순히 값 변경을 넘어 프로세스상태가 변경되는 경우 - POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음 - 예) POST /order/{orderId}/start-delivery (컨트롤 URI)**3. 다른 메서드로 처리하기 애매한 경우** - 예) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우 - 애매하면 POST ✅ HTTP 메서드 - PUT, PATCH, DELETE🔹 PUT 리소스를 대체 리소스가 있으면 대체 리소스가 없으면 생성 쉽게 이야기해서 덮어버림 클라이언트가 리소스를 식별 클라이언트가 리소스 위치를 알고 URI 지정 POST와 차이점 리소스를 수정하는 것이 아니다 → 갈아 치우는 것이다 🔹 PATCH 리소스 부분 변경 1234{ &quot;username&quot;: &quot;young&quot;, &quot;age&quot;: 50} 🔹 DELETE 리소스 제거 ✅ HTTP 메서드의 속성 🔹 안전 호출해도 리소스를 변경하지 않는다 호출할 때 → 변경하는 것들 POST, PUT, DELETE .. 안전은 해당 리소스만 고려한다 🔹 멱등 한 번 호출하든 두 번 호출하든 100번 호출하든 → 결과가 똑같다 f( f(x) ) = f(x) 클라이언트가 똑같은 요청 할 때 GET : 한 번 조회하든, 두번 조회하든 같은 결과가 조회 PUT : 결과를 대체한다. 따라서 같은 요청을 여러번 해도 최종 결과는 같다 DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다 POST : 멱등이 아니다. 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다 활용 자동 복구 메커니즘 서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가? 멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지는 고려하지는 않는다 🔹 캐시 가능 응답 결과 리소스를 캐시해서 사용해도 되는가? GET, HEAD, POST, PATCH 캐시가능 실제로는 GET, HEAD 정도만 캐시로 사용","link":"/2022/02/01/http/HTTP-%EB%A9%94%EC%84%9C%EB%93%9C/"},{"title":"3. HTTP 기본","text":"📌 HTTP 기본 📌 HTTP 기본 ✅ 모든 것이 HTTP ✅ 클라이언트-서버 구조 ✅ 무상태 프로토콜 = stateless ✅ 비연결성 ✅ HTTP 메시지 ✅ 단순하고 확장 가능 이미지 참고 : https://velog.io/@dnstlr2933/HTTP 123456789# HTTP 정리- HTTP 메시지에 모든 것을 전송- HTTP/1.1을 기준으로 학습- 클라이언트 서버 구조- 무상태 프로토콜- HTTP 메시지- 단순함, 확장 가능- 현재 HTTP 시대 ✅ 모든 것이 HTTP HTML, TEXT IMAGE, 음성, 영상, 파일 JSON, XML (API) 거의 모든 형태의 데이터를 전송할 수 있다 서버간에 데이터를 주고받을 때도 대부분 http 사용 HTTP/1.1 → 가장 많이 사용하며, 그 이상은 개선 버전일 뿐이다 TCP : HTTP/1.1, HTTP/2 UDP : HTTP/3 🔸 HTTP 특징 클라이언트 서버 구조 무상태 프로토콜, 비연결성 HTTP 메시지 단순함, 확장 가능 ✅ 클라이언트-서버 구조 Request Response 구조 클라이언트는 서버에 요청을 보내고 → 응답을 대기 서버가 요청에 대한 결과를 만들어서 → 응답 클라이언트와 서버를 구별하게 된것이 핵심 구별함으로써 각각 자신의 서비스가 독립적으로 발전할 수 있게 되었다 서버 → 비즈니스 로직, 데이터 등 클라이언트 → UI, 사용성 ✅ 무상태 프로토콜 = stateless Stateful → 상태유지, 서버가 클라이언트의 상태를 보존하는 것 Stateless → 서버가 클라이언트의 상태를 보존 X 장점 : 서버 확장성 높음 (스케일 아웃 : 수평 확장에 유리) 단점 : 클라이언트가 추가 데이터 전송 🔸 stateful, stateless 차이 상태 유지 중간에 다른 점원으로 바뀌면 안된다 (상태 정보를 미리 알려줘야 가능) 무상태 중간에 다른 점원으로 바뀌어도 된다 갑자기 고객이 증가해도 점원을 대거 투입 가능 갑자기 클라이언트 요청 증가해도 서버를 대거 투입 가능 무상태는 응답 서버를 쉽게 바꿀 수 있다 → 무한한 서버 증설 가능 🔸 Stateless 한계 모든 것을 무상태로 설계 할 수는 없다 무상태 예) 로그인이 필요 없는 단순한 서비스 소개 화면 상태 유지 예) 로그인 로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지 일반적으로 브라우저 쿠키와 서버 세션등을 사용해 상태 유지 상태 유지는 최소한만 사용 데이터를 많이 보내야 한다 ✅ 비연결성 이렇듯 연결을 유지해놓으면 → 서버의 자원이 계속해서 소모된다 HTTP는 기본이 연결을 유지하지 않는 모델 일반적으로 초 단위의 이하의 빠른 속도로 응답 예) 웹 브라우저에서 계속 연속해서 검색 버튼을 누르지 않는다 서버 자원을 매우 효율적으로 사용할 수 있음 🔸 비 연결성 한계와 극복 TCP/IP 연결을 새로 맺어야 함 - 3 way handshake 시간 추가 웹 브라우저로 사이트를 요청하면 HTML, JS, CSS, image 등 많은 자원이 함께 다운로드 지금은 HTTP 지속 연결로 문제 해결 HTTP/2, 3에서 더많은 최적화 🔸 무상태를 기억하자 정말 같은 시간에 딱 맞추어 발생하는 대용량 트래픽 예시) 선착순 이벤트, 명절 KTX 예약, 수강 신청 어떻게든 상태유지를 줄여서 무상태로 만들어서 순식간에 대응하기 위한 서버를 늘릴수 있도록 해야한다 따라서 첫 페이지는 아무런 상태도 필요없는 html로 이루어진 페이지를 놔두고 그 안에 이벤트 참여 버튼을 두게 하여서 조금이나마 한번에 덜 몰려오도록 설계 ✅ HTTP 메시지 🔸 http 메시지의 공식 스펙1234HTTP - message = start-line\\*( headerCRLF )CRLF[ message-body ] 🔹 시작 라인 (Start-line)🔸 요청 메시지 (request-line)12**GET /search?q=hello&amp;hl=ko HTTP/1.1**Host: www.google.com HTTP 메서드 (GET: 조회) 요청 대상 (/search?q=hello&amp;hl=ko) HTTP Version 상세히 설명하면 요청 메시지 - HTTP 메서드 종류 : GET, POST, PUT, DELETE 서버가 수행해야 할 동작 지정 GET : 리소스 조회 POST : 요청 내역 처리 요청 메시지 - 요청 대상 absolute-path[?query] (절대경로[?쿼리]) 절대경로= “/“ 로 시작하는 경로 🔸 응답 메시지 (status-line)1234567**HTTP/1.1 200 OK**Content-Type: text/html;charset=UTF-8Content-Length: 3423&lt;html&gt; &lt;body&gt;...&lt;/body&gt;&lt;/html&gt; HTTP 버전 HTTP 상태 코드: 요청 성공, 실패를 나타냄• 200: 성공• 400: 클라이언트 요청 오류• 500: 서버 내부 오류 이유 문구: 사람이 이해할 수 있는 짧은 상태 코드 설명 글 🔹 HTTP 헤더 🔸 HTTP 헤더 용도 HTTP 전송에 필요한 모든 부가 정보 메시지 바디의 내용, 크기, 압축, 인증, 요청 클라이언트 정보, 서버 애플리케이션 정보, 캐시 표준 헤더가 너무 많다 필요시 임의의 헤더 추가 가능 즉, 메시지 바디 빼고 필요한 메타 데이터 정보 다 있다 🔹 HTTP 메시지 바디 실제 전송할 데이터 HTML 문서, 이미지, 영상, JSON 등 → byte로 표현할 수 있는 모든 데이터 전송 가능 ✅ 단순하고 확장 가능 HTTP는 단순하다 HTTP 메시지도 매우 단순하다 크게 성공하는 표준 기술은 → 단순하지만 확장 가능한 기술","link":"/2022/01/29/http/HTTP-%EA%B8%B0%EB%B3%B8/"},{"title":"5. HTTP 메서드 활용","text":"📌 HTTP 메서드 활용 📌 HTTP 메서드 활용 ✅ 클라이언트에서 서버로 데이터 전송 🔹 클라이언트에서 서버로 데이터를 전송하는 4가지 상황 1. 정적 데이터 조회 2. 동적 데이터 조회 3. HTML Form 데이터 전송 4. HTTP API 데이터 전송 ✅ HTTP API 설계 예시 🔹 API 설계 - POST 기반 등록 🔸 POST - 신규 자원 등록 특징 🔹 API 설계 - PUT 기반 등록 🔸 PUT - 신규 자원 등록 특징 🔹 HTML FORM 사용 🔹 참고하면 좋은 URI 설계 개념 참고: https://velog.io/@dnstlr2933/HTTP-Method ✅ 클라이언트에서 서버로 데이터 전송데이터 전달 방식은 크게 2가지가 있다 쿼리 파라미터를 통한 데이터 전송 GET 주로 정렬 필터 (검색어) 메시지 바디를 통한 데이터 전송 POST, PUT, PATCH 회원 가입, 상품 주문, 리소스 등록, 리소스 변경 🔹 클라이언트에서 서버로 데이터를 전송하는 4가지 상황1. 정적 데이터 조회 이미지, 정적 텍스트 문서 조회는 GET 사용 정적 데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능 2. 동적 데이터 조회 주로 검색, 게시판 목록에서 정렬 필터 (검색어) 조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용 조회는 GET 사용 GET은 쿼리 파라미터 사용해서 데이터를 전달 https://catsbi.oopy.io/e43388ef-bc41-4f44-986c-010c12b596dd 3. HTML Form 데이터 전송 POST 전송 - 저장 이렇게 클라에서 만들고 전송 버튼을 누르면 웹 브라우저가 HTTP 요청 메시지를 생성 GET 전송 - 조회 파일이나 이미지 같은 자료는 어떻게 전송되는가? multipart/form-data 는 말 그대로 input에 type들을 여러 개 쓸 때 사용한다 boundary(---XXX)를 통해 username, age, file등을 구분 해서 보낸다 파일 업로드 같은 바이너리 데이터 전송시 사용 12345678910111213# HTML Form 데이터 전송 정리HTML Form submit시 POST 전송예) 회원가입, 상품주문, 댓글, 데이터 변경 등Content-Type : application/x-www-form-urlencoded 사용 - form의 내용을 메시지 바디를 통해서 전송 (key=value, 쿼리 파라미터 형식) - 전송 데이터를 url endcoding 처리예) abc김 -&gt; abc%EA%9B%80HTML From은 GET 전송도 가능하다Content-Type : multipart/form-data - 파일 업로드 같은 바이너리 데이터 전송시 사용한다 - 다른 종류의 여러 파일과 폼의 내용을 함께 전송 할 수 있다 (그래서 multipart)**HTML Form 전송은 GET, POST만 지원한다** 4. HTTP API 데이터 전송 바로 데이터를 위와 같은 형식으로 만들어서 데이터를 전달하면 된다 서버 to 서버 백엔드 시스템 통신 앱 클라이언트 아이폰, 안드로이드 웹 클라이언트 HTML에서 Form 전송 대신 JS 통한 통신에 사용 (AJAX) 예) React, Vue 같은 웹 클라이언트와 API 통신 POST, PUT, PATCH : 메시지 바디를 통해 데이터 전송 GET : 조회, 쿼리 파라미터로 데이터 전달 Content-Type: application/json을 주로 사용 Text, XML, JSON 등등 ✅ HTTP API 설계 예시회원 관리를 예시로 API를 다양한 방법으로 설계해보자 HTTP API → 컬렉션 POST 기반 등록 예) 회원 관리 API 제공 HTTP API → 스토어 PUT 기반 등록 예) 정적 컨텐츠 관리, 원격 파일 관리 HTML FORM 사용 웹 페이지 회원 관리 GET, POST만 지원 🔹 API 설계 - POST 기반 등록 회원 목록 /members → GET 회원 정렬조건이나 검색 조건이 필요하면 쿼리 파라미터를 설계하면 된다. 회원 등록 /members → POST 회원 조회 /members/{id} → GET 계층적 구조로 되어있어 컬렉션 안의 특정 아이디를 조회한다고 볼 수 있어 가독성도 높다. 회원 수정 /members/{id} → PATCH, PUT, POST PUT은 덮어쓰기고 PATCH는 부분적 업데이트이기에 회원 정보 수정은 PATCH가 좋다. 하지만, 수정이 전부 다 변경해줘야 하는 경우(ex: 게시판 글 수정하기)에는 PUT을 쓰는게 좋을 수도 있다. 회원 삭제 /members/{id} → DELETE 🔸 POST - 신규 자원 등록 특징 클라이언트는 등록될 리소스의 URI를 모른다. 회원 등록 /members → POST POST /members 서버가 새로 등록된 리소스 URI를 생성해준다. HTTP/1.1 201 CreatedLocation: /members/100 컬렉션(Collection) 서버가 관리하는 리소스 디렉토리 서버가 리소스의 URI를 생성하고 관리 여기서 컬렉션은 /members 🔹 API 설계 - PUT 기반 등록 파일 목록 /files → GET 파일 조회 /files/{filename} → GET 파일 등록 /files/{filename} → PUT 파일 삭제 /files/{filename} → DELETE 파일 대량 등록 /files → POST POST는 상황에 맞게 쓸 수 있다. 이번 경우에는 대량 등록을 위해 사용 🔸 PUT - 신규 자원 등록 특징등록을 위해 POST 대신 → PUT을 사용. 어떤 차이점??? 클라이언트가 리소스 URI를 알고 있어야 한다 파일 등록 /files/{filename} -&gt; PUT PUT /files/start.jpg 클라이언트가 직접 리소스의 URI를 지정한다 스토어(store) 클라이언트가 관리하는 리소스 저장소 클라이언트가 리소스의 URI를 알고 관리한다 여기서 스토어는 /files 🔹 HTML FORM 사용 HTML FORM은 GET, POST만 지원한다 AJAX 같은 기술을 사용해서 해결 가능하다 → 회원 API 참고 순수 HTML + HTML FORM은 GET, POST만 지원하므로 제약이 있다 회원 목록 /members → GET 회원 등록 폼 /members/new → GET 회원 등록 /members/new, /members → POST 회원 조회 /members/{id} → GET 회원 수정 폼 /members/{id}/edit → GET 회원 수정 /members/{id}/edit, /members/{id} → POST 회원 삭제 /members/{id}/delete → POST 컨트롤 URI GET, POST만 지원하므로 제약이 있다 이런 제약을 해결하기 위해 동사로 된 리소스 경로를 사용한다 위에서는 POST의 /new, /edit, /delete가 컨트롤 URI이다 HTTP 메서드로 해결하기 애매한 경우 사용한다 (HTTP API 포함) 🔹 참고하면 좋은 URI 설계 개념 문서 (document) 단일 개념(파일하나, 객체 인스턴스, 데이터베이스 row) 예) /members/100, /files/start.jpg 컬렉션 (Collection) 서버가 관리하는 리소스 디렉터리 서버가 리소스를 생성하고 관리한다 예) /members 스토어 (Store) 클라이언트가 관리하는 자원 저장소 클라이언트가 리소스의 URI를 알고 관리한다 서버에 등록할 때 URI를 지정해서 전달한다 예) /files 컨트롤러 (Controller), 컨트롤 URI 문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스를 실행한다 동사를 직접 사용한다 예) members/{id}/delete https://restfulapi.net/resource-naming/","link":"/2022/02/03/http/HTTP-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%99%9C%EC%9A%A9/"},{"title":"9. HTTP-인증헤더&amp;쿠키","text":"📌 인증 헤더, 쿠키 📌 인증 헤더, 쿠키 ✅ 인증 🔸 Authorizaton 🔸 WWW-Authenticate ✅ 쿠키 예제 - 쿠키 미사용 🔸 Stateless (무상태) 🔸 쿠키 상세 설명 🔸 쿠키 - 생명 주기 🔸 쿠키 - 도메인 🔸 쿠키 - 경로 🔸 쿠키 - 보안 참고 : https://velog.io/@dnstlr2933/HTTP-헤더-일반헤더 ✅ 인증🔸 Authorizaton클라이언트 인증 정보를 서버에 전달 Authorization: Basic xxxxxxxxxxxx 인증하는 메커니즘마다 들어가는 값이 다르다 🔸 WWW-Authenticate리소스 접근시 필요한 인증 방법 정의 리소스 접근시 필요한 인증 방법을 정의한다 401 Unauthorized 응답과 함께 사용한다 WWW-Authenticate: Newauth realm=&quot;apps&quot;, type=1, title=&quot;Login to\\&quot;apps\\&quot;&quot;, Basic realm=&quot;simple&quot; 위와 같은 내용을 참고해서 요청하라는 뜻이다 ✅ 쿠키 Set-Cookie : 서버에서 클라이언트로 쿠키 전달 (응답) Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달 예제 - 쿠키 미사용위의 이유는? 🔸 Stateless (무상태) HTTP는 무상태(Stateless) 프로토콜이다 클라이언트와 서버가 요청과 응답을 주고 받고나면 연결이 끊어진다 클라이언트가 다시 요청하면 서버는 이전 요청을 기억하지 못한다 로그인 정보 조차도 기억하지 못한다 클라이언트와 서버는 서로 상태를 유지하지 않는다 대안 → 모든 요청에 사용자 정보 포함 모든 요청과 링크에 사용자를 포함해야 해서 복잡해진다 Q. 그럼 어떻게 정보를 기억하지? A. 요청 할 때마다 정보를 같이 넘기자 모든 요청에 사용자 정보가 포함되도록 해야 한다 보안 문제도 있고, 복잡하다 브라우저를 완전히 종료하고 다시 열면 또 복잡해진다 최종적인 대안으로 쿠키가 나왔다 자동으로 웹브라우저는 해당 서버에 요청을 보낼 때 마다 쿠키 저장소를 항상 탐색해서헤더에 포함해 서버에 보낸다 모든 요청에 쿠키 정보 자동 포함 🔸 쿠키 상세 설명12set-cookie: **sessionId=abcde1234; expires**=Sat, 26-Dec-2020 00:00:00 GMT;**path**=/; **domain**=.google.com; **Secure** 사용처 사용자 로그인 세션 관리 유저의 이름 등 보안상 문제로 → 서버에서 sessionkey 만들어서 → sessionId 치환 광고 정보 트래킹 쿠키 정보는 항상 서버에 전송됨 네트워크 트래픽 추가 유발 최소한의 정보만 사용 (세션 id, 인증 토큰) 서버에 전송하지 않고, 웹 브라우저 내부에 데이터를 저장하고 싶으면 웹 스토리지 (localStorage, sessionStorage) 참고 보안에 민감한 데이터는 저장하면 안됨 (주민번호, 신용카드 번호 등등) 🔸 쿠키 - 생명 주기Expires, max-age Set-Cookie: expires=Sat, 26-Dec-2020 04:50:59 GMT 만료일이 되면 쿠키를 삭제한다 Set-Cookie: max-age=3600 (초단위이다) 0이하의 수를 지정하게되면 삭제한다 세션 쿠키 : 만료날짜를 생략하면 브라우저 종료시 까지만 유지한다 영속 쿠키 : 만료날짜를 입력하면 해당 날짜까지 유지된다 🔸 쿠키 - 도메인Domain 예) domain=example.org 명시 : 명시한 문서 기준 도메인 + 서브 도메인 포함 domain=example.org를 지정해서 쿠키 생성 example.org는 물론이고, dev.example.org도 쿠키 접근 한다 생략 : 현재 문서 기준 도메인만 적용한다 example.org에서 쿠키를 생성하고 domain지정을 생략 example.org에서만 쿠키가 접근하고 dev.example.org는 쿠키가 접근할 수 없다 🔸 쿠키 - 경로예) path=/home 입력한 경로를 포함한 하위 경로 페이지만 쿠키가 접근 일반적으로 path=/(루트)로 지정한다 예) path=/home 지정 /home –&gt; o /home/level1 –&gt; o /home/level1/level2 .. –&gt; o /hello –&gt; x 🔸 쿠키 - 보안Secure, HttpOnly, SameSite Secure 기본적으로 쿠키는 http, https를 구분하지 않고 전송한다 Secure를 설정하면 https인 경우에만 전송한다 HttpOnly XSS 공격을 방지 자바스크립트에서 접근 불가능하다 (document.cookie) , 원래는 접근 가능 HTTP 전송에만 사용 SameSite XSRF 공격을 방지한다 요청 도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키를 전송한다","link":"/2022/02/16/http/HTTP-%EC%9D%B8%EC%A6%9D%ED%97%A4%EB%8D%94-%EC%BF%A0%ED%82%A4/"},{"title":"6. HTTP 상태코드","text":"📌 HTTP 상태코드 HTTP 상태코드 ✅ 상태 코드 만약 모르는 상태 코드가 나타나면 ? 🔹 2xx (Successful) 🔹 3xx (Redirection) 🔹 4xx (Client Error) 🔹 5xx (Server Error) 참고 : https://catsbi.oopy.io/418f4c7e-2c07-4e54-a214-32d8d28e99da https://velog.io/@dnstlr2933/HTTP-상태코드 ✅ 상태 코드클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 1xx (Informational) : 요청이 수신되어 처리중 2xx (Successful) : 요청 정상 처리 3xx (Redirection) : 요청을 완료하려면 추가 행동이 필요 4xx (Client Error) : 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없는 경우 5xx (Server Error) : 서버 오류, 서버가 정상 요청을 처리하지 못한 경우 만약 모르는 상태 코드가 나타나면 ? 클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면? 클라이언트는 상위 상태코드로 해석해서 처리 미래에 새로운 상태 코드가 추가 되어도 클라이언트를 변경하지 않아도 됨 299 (???) -&gt; 2xx (Successful) 451 (???) -&gt; 4xx (Client Error) 599 (???) -&gt; 5xx (Server Error) 🔹 2xx (Successful) 클라이언트의 요청을 성공적으로 처리 200 OK 201 Created (리소스 생성, POST로 등록 등의 경우) 202 Accepted 203 No Content 🔸 200 ok 요청 성공 🔸 201 Created 요청 성공해서 새로운 리소스가 생성됨 🔸 202 Accepted 요청이 접수되었으나 처리가 완료되지 않음 배치 처리 같은 곳에서 사용 예) 요청 접수 후 1시간 뒤에 배치 프로세스가 요청을 처리함 🔸 203 No Content 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음 예) 웹 문서 편집기에서 save 버튼 save 버튼의 결과로 아무 내용이 없어도 된다 save 버튼을 눌러도 같은 화면을 유지해야 한다 🔹 3xx (Redirection) 요청을 완료하기 위해 유저 에이전트의 추가 조치 필요 300 Multiple Choices (사용 X) 301 Moved Permanently 302 Found 303 See Other 304 Not Modified 307 Temporary Redirect 308 Permanent Redirect 리다이렉션 이해 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동(리다이렉트) 🔸 종류 영구 리다이렉션 - 특정 리소스의 URI가 영구적으로(permanently) 이동 예) /members -&gt; /users 예) /event -&gt; /new-event 일시 리다이렉션 - 일시적인 변경 주문 완료 후 주문 내역 화면으로 일시적으로 이동 PRG : Post/Redirect/Get 특수 리다이렉션 결과 대신 캐시를 사용 다시 서버한테서 다운 받지 말고 브라우저에 있는 캐시를 써라 🔸 영구 리다이렉션 - 301, 308 리소스의 URI가 영구적으로 이동 원래의 URI를 사용 X, 검색 엔진 등에서도 변경을 인지 301 Moved Permanently 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있다 무언가를 작성한 데이터를 전송하는 경우였다면(post), GET으로 변하면서 해당 데이터는 날라가고 다시 작성해야 된다 308 Permanent Redirect 301과 기능은 같다 리다이렉트시 요청 메서드와 본문을 유지한다 (처음 POST를 보내면 리다이렉트도 POST로 유지) 🔸 일시적인 리다이렉션 - 302, 307, 303 리소스의 URI가 일시적으로 변경 따라서 검색 엔진 등에서 URL을 변경하면 안된다 302 Found 리다이렉트시 요청 메시지가 GET으로 변하고, 본문이 제거될 수 있음 307 Temporary Redirect 302와 기능이 똑같다 POST 유지 리다이렉트시 요청 메서드와 본문을 유지한다 (요청 메시지 변경은 X, MUST NOT) 303 See Other 302와 기능이 똑같다 라다이렉트시 요청 메서드가 GET으로 변경 PRG : POST/Redirect/GET일시적인 리다이렉션의 사용은 언제 쓸까? 문제점 POST로 주문후에 웹 브라우저를 새로고침하면? 새로고침은 다시 요청 중복 주문이 될 수 있다 해결점 POST로 주문 후에 새로 고침으로 인한 중복 주문 방지 (클라에서 차단) POST로 주문후에 주문 결과 화면을 GET 메서드로 리다이렉트 새로고침해도 결과 화면을 GET으로 조회 중복 주문 대신에 결과 화면만 GET으로 다시 요청 PRG 이후 리다이렉트 URL이 이미 POST → GET으로 리다이렉트 됨 새로 고침 해도 GET으로 결과 화면만 조회 🔸 기타 리다이렉션 304 Not Modified 캐시를 목적으로 사용한다 클라이언트에게 리소스가 변경(수정)되지 않았음을 알려준다. 따라서 클라이언트는 로컬PC에 저장된 캐시를 재사용하게 된다 (캐시로 리다이렉트 한다) 304 응답은 응답에 메시지 바디를 포함 하면 안된다(로컬 캐시를 사용하라는 것이므로) 조건부 GET, HEAD 요청시 사용한다 🔹 4xx (Client Error) 클라이언트의 요청에 잘못된 문법등으로 서버가 요청을 수행할 수 없음 오류의 원인이 클라이언트에 있음 중요! 클라이언트가 이미 잘못된 요청, 데이터를 보내고 있기 때문에, 똑같은 재시도가 실패함 🔸 400 Bad Request 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없음 요청 구문, 메시지 등등 오류 클라이언트는 요청 내용을 다시 검토하고, 보내야함 예) 요청 파라미터가 잘못되거나, API 스펙이 맞지 않을 때 🔸 401 Unauthorized 클라이언트가 해당 리소스에 대한 인증이 필요함 인증(Authentication)되지 않음 401 오류 발생시 응답에 WWW-Authenticate 헤더와 함께 인증 방법을 설명 참고 인증 (Authentication) : 본인이 누구인지 확인하는 것 (로그인) 인가 (Authorization) : 권한 부여 (ADMIN 권한 처럼 특정 리소스에 접근할 수 있는 권한, 먼저 인증이 있어야 인가가 있다) 오류 메시지가 Unauthorized이지만 의미는 인증이 되지 않음이다 (단어로는 Unauthentication이 인증되지 않았다는 뜻) 🔸 403 Forbidden 서버가 요청을 이해했지만 승인을 거부함 주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우 예) 어드민 등급 아닌 사용자가 로그인했지만, 어드민 등급의 리소스에 접근하는 경우 🔸 404 Not Found 요청 리소스를 찾을 수 없음 요청 리소스가 서버에 없음 또는 클라가 권한이 부족한 리소스에 접근할 때 해당 리소스를 숨기고 싶을 때 🔹 5xx (Server Error)서버 오류 서버 문제로 오류 발생 서버에 문제가 있기 때문에 재시도 하면 성공할 수 도 있음 🔸 500 Internal Server Error 서버 문제로 오류 발생, 애매하면 500오류 🔸 503 Service Unavailable 서비스 이용 불가 서버가 일시적인 과부하 또는 예정된 작업으로 잠시 요청을 처리할 수 없음","link":"/2022/02/04/http/HTTP-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C/"},{"title":"7. HTTP 일반헤더","text":"📌 HTTP 헤더 - 일반 헤더 📌 HTTP 헤더 - 일반 헤더 🔸 용도 🔹 헤더 분류 (과거) - RFC2616 🔸 HTTP BODY 🔹 RFC723x 변화 🔸 HTTP BODY ✅ 표현 🔸 Content-Type 🔸 Content-Encoding 🔸 Content-Language 🔸 Content-Length ✅ 협상 (콘텐츠 네고시에이션) 🔸 예시 🔸 협상과 우선순위1 🔸 협상과 우선순위2 참고: https://velog.io/@dnstlr2933/HTTP-헤더-일반헤더 🔸 용도 HTTP 전송에 필요한 모든 부가정보가 들어간다 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시관리 정보 등등… 표준 헤더가 매우 많다 필요 시 임의의 헤더를 추가할 수 있다 helloworld: hihi 🔹 헤더 분류 (과거) - RFC2616 General 헤더 : 메시지 전체에 적용되는 정보 예) Connection: close Request 헤더 : 요청정보 예) 웹브라우저가 무엇인지 User-Agent: Mazilla/5.0 (Macintosh; .. ) Response 헤더 : 응답 정보 예) 요청을 처리하는 서버가 무엇인지 Server: Apache Entity 헤더 : 엔티티 바디 정보 예) 메시지 바디의 타입 및 길이 Content-Type: text/html, Content-Length: 3423 🔸 HTTP BODY 메시지 본문(msg body)은 엔티티 본문(entity body)을 전달하는데 사용한다 엔티티 본문은 요청이나 응답에서 전달할 실제 데이터 엔티티 헤더는 엔티티 바디의 데이터를 해석할 수 있는 정보를 제공한다 데이터의 유형(html, json), 데이터의 길이, 압축 정보 등 RFC2616 폐기 → RFC7230 등장 🔹 RFC723x 변화 엔티티(Entity) → 표현 (Representation) 표현 = representation Metadata + representation Data 표현 = 표현 메타데이터 + 표현 데이터 🔸 HTTP BODY 메시지 본문(msg body)을 통해서 표현(Representation) 데이타 전달 메시지 본문 == 페이로드 (payload) 데이터를 실어나르는 데이타 부분을 페이로드라 한다 표현은 요청이나 응답에서 전달할 실제 데이터 표현 헤더는 표현 데이터를 해석할 수 있는 정보를 제공한다 데이터 유형(html, json), 데이터 길이, 압축 정보 등등 참고로 표현 헤더는 표현 메타데이터와 페이로드 메시지를 구분해야한다 REST API 의 R이 표현이다 ✅ 표현 Content-Type : 표현 데이터의 형식 의미 : 회원이라는 리소스를 html or json이라는 표현으로 전달할거야 Content-Encoding : 표현 데이터의 압축 방식 Content-Language : 표현 데이터의 자연 언어 의미 : 이 언어가 한국어인지, 영어언지 Content-Length : 표현 데이터의 길이 자세히 따지면 표현 데이타의 길이는 표현대상과 무관한 정보로 사실 페이로드 헤더라고 구분해야 한다 표현헤더는 전송, 응답 둘다 사용한다 🔸 Content-Type표현 데이터의 형식 설명 메시지 바디에 들어가는 데이터가 무엇인지 설명 미디어 타입, 문자 인코딩 등 예) text/html; charset=utf-8 application/json image/jpg 🔸 Content-Encoding표현 데이터 인코딩 표현 데이터를 압축하기 위해 많이 사용 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제 예) gzip (압축) deflate identity (압축안하는것, 똑같다는뜻) 🔸 Content-Language표현 데이터의 자연언어 표현 데이터의 자연 언어를 표현 ko, en, en-US 등등 🔸 Content-Length표현 데이터의 길이 바이트 단위 Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안된다 Transfer-Encoding안에 관련 정보들이 이미 전부 들어가있어서 추가적으로 사용하면 안된다 ✅ 협상 (콘텐츠 네고시에이션) 클라이언트가 선호하는 표현 요청 Accept : 클라이언트가 선호하는 미디어 타입을 서버에 전달 Accept-Charset : 클라이언트가 선호하는 문자 인코딩을 서버에 요청 Accept-Encoding : 클라이언트가 선호하는 압축 인코딩을 서버에 요청 Accept-Language : 클라이언트가 선호하는 자연언어를 서버에 요청 협상 헤더는 요청시에만 사용을 한다 → 클라이언트가 서버에게 원하는 표현에게 달라고 요청하는 것, 서버는 원하는 데이터로 만드는 것 🔸 예시 🔸 협상과 우선순위1Quality Values(q) Quality Valuese(q)값을 사용한다 0~1 의 값을 사용하며, 클수록 높은 우선 순위이다 생략하면 1 Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7 ko-KR;q=1 (뒤 부분 생략, 1로 설정된다) ko;q=0.9 en-US;q=0.8 en;q=0.7 🔸 협상과 우선순위2Quality Values(q) 구체적인 것을 우선시한다 Accept: text/_, text/plain, text/pain;format=flowed, _/* text/plain;format=flowed text/plain text/* /","link":"/2022/02/08/http/HTTP-%EC%9D%BC%EB%B0%98%ED%97%A4%EB%8D%94/"},{"title":"8.HTTP-일반헤더2","text":"✅ 전송 방식 🔸 단순 전송 🔸 압축 전송 🔸 분할 전송 🔸 범위 전송 ✅ 일반 정보 🔸 From 🔸 Referer 🔸 User-Agent 🔸 Server 🔸 Date ✅ 특별한 정보 헤더 🔸 Host 🔸 Location 🔸 Allow 🔸 Retry-After ✅ 전송 방식 단순 전송 압축 전송 분할 전송 범위 전송 🔸 단순 전송Content-Length 전달하고자 하는 message-body의 길이를 아는 경우 🔸 압축 전송Content-Encoding 전달하고자 하는 표현 데이터를 압축해서 전달하되 꼭 표현 헤더에 Content-Encoding을 넣어줘서 해당 압축을 읽을 수 있도록 해야 한다 🔸 분할 전송Transfer-Encoding 바이트 단위로 쪼개서 분할해 보낸다 🔸 범위 전송Range, Content-Range 어떤 데이터를 전달하다가 끊겼을 때, 끊긴 데이터만 범위로 지정해서 보내는 것 ✅ 일반 정보 From: 유저 에이전트의 이메일 정보 Referer: 이전 웹 페이지 주소 User-Agent: 유저 에이전트 애플리케이션 정보 Server: 요청을 처리하는 오리진 서버의 소프트웨어 정보 Date: 메시지가 생성된 날짜 🔸 From유저 에이전트의 이메일 정보 검색 엔진 같은 곳에서 나의 사이트를 크롤링 하는등 접근하는 경우 해당 검색 엔진의 담당자에게 이메일로 연락하는 경우 등에 사용한다 요청에서 사용 거의 사용하지 않는다 🔸 Referer이전 웹페이지 주소 현재 요청된 페이지의 이전 웹페이지 주소 A → B로 이동하는 경우 B로 요청할 때 Referer: A를 포함해서 요청한다 Referer를 사용해서 유입 경로 분석을 할 수 있다 요청에서 사용한다 🔸 User-Agent유저 에이전트 애플리케이션 정보 Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 클라이언트의 애플리케이션 정보(웹 브라우저 정보 등등) 통계 정보로 활용 어떤 종류의 브라우저에서 장애가 발생하는지 파악이 가능하다 요청에서 사용한다 🔸 Server요청을 처리하는 ORIGIN서버의 소프트웨어 정보 Server: Apache/2.2.22 (Debian) server: nginx 최종적으로 응답을 처리해주는 서버이다 응답에서 사용 🔸 Date메시지가 발생한 날짜와 시간 Date: Tue, 15 Nov 1994 08:12:31 GMT 응답에서만 사용한다 ✅ 특별한 정보 헤더 Host : 요청한 호스트 정보 (도메인) Location : 페이지 리다이렉션 Allow : 허용 가능한 HTTP 메서드 Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간 🔸 Host 요청에서 사용한다 필수적으로 넣어야한다 하나의 서버가 여러 도메인을 처리해야 할 때 하나의 IP 주소에 여러 도메인이 적용되어 있을 때 12GET /search?q=hello&amp;hl=ko HTTP/1.1Host: www.google.com 가상호스트를 통해 여러 도메인을 한번에 처리할 수 있는 서버 실제 애플리케이션이 여러개 구동될 수 있다. 🔸 Location페이지 리다이렉션 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동한다 (리다이렉트) 201 (Created) : Lcation값은 요청에 의해 생성된 리소스 URI 3xx (Redirection) : Location값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스를 가리킨다 🔸 Allow허용 가능한 HTTP 메서드 405(Method Not Allowed)에서 응답에 포함해야 한다 Allow: GET, HEAD, PUT 만약 서버가 허용하지 않는 메서드 ex) PATCH 등이 온 경우 응답으로 405를 주면서 허용하는 메서드를 Allow: GET, HEAD, PUT으로 알려줘야 한다 🔸 Retry-After유저 에이전트가 다음 요청을 하기까지 기다려야하는 시간 503 (Service Unavailable) : 서비스가 언제까지 불능인지 알려줄 수 있다 Retry-After: Fri, 31 DEC 1999 23:59:59 GMT (날짜 표기) Retry-After: 120 (초 단위 표기)","link":"/2022/02/08/http/HTTP-%EC%9D%BC%EB%B0%98%ED%97%A4%EB%8D%942/"},{"title":"10.HTTP-캐시와 조건부 요청","text":"📌 HTTP 헤더 - 캐시와 조건부 요청 📌 HTTP 헤더 - 캐시와 조건부 요청 ✅ 캐시 기본 동작 🔹 캐시가 없을 때 🔹 캐시 적용 🔸 캐시 시간 초과 ✅ 검증 헤더와 조건부 요청1 🔹 검증 헤더 추가 두 번째 요청 - 캐시 시간 초과 🔸 정리 ✅ 검증 헤더와 조건부 요청2 🔸 Last-Modified - If-Modified-Since 단점 🔸 ETag, If-None-Match 🔸 정리 ✅ 캐시와 조건부 요청 헤더 🔸 Cache-Control - 캐시 지시어 🔸 Pragma 🔸 Expires - 캐시 만료일 지정 참고 : https://velog.io/@dnstlr2933/HTTP-헤더캐시와-조건부-요청 ✅ 캐시 기본 동작🔹 캐시가 없을 때 첫 번째 요청일 때 → HTTP 헤더랑 바디를 만들고 이미지를 전송 두 번째 요청일 때 → 똑같이 위와 같다 캐시가 없을 때 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야 한다 인터넷 네트워크는 매우 느리고 비싸다 브라우저 로딩 속도가 느리다 느린 사용자 경험 🔹 캐시 적용 두 번째 요청일 경우 브라우저 캐시 메모리를 먼저 확인 캐시 유효 시간을 검증하고 위의 경우에선 60초 이내라면 유효 해당 파일을 가져온다 캐시 적용 캐시 덕분에 캐시 가능 시간동안 네트워크를 사용하지 않아도 된다 비싼 네트워크 사용량을 줄일 수 있다 브라우저 로딩 속도가 매우 빠르다 빠른 사용자 경험 🔸 캐시 시간 초과 캐시 유효 시간이 초과하면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신한다 이때 다시 네트워크 다운로드가 발생한다 ➡️ 이를 해결하는 법은? → 검증 헤더, 조건부 요청 ✅ 검증 헤더와 조건부 요청1 캐시 유효 시간이 초과해서 서버에 다시 요청하면 다음 두 가지 상황이 나타남 서버에서 기존 데이터를 변경함 서버에서 기존 데이터를 변경하지 않음 캐시 만료 후에도 서버에서 데이터를 변경하지 않았다면? 생각해보면 데이터를 전송하는 대신에 저장해 두었던 캐시를 재사용 할 수 있다 단 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법 필요 🔹 검증 헤더 추가**검증 헤더** : Last-Modified **조건부 요청** : if-modified-since 데이터가 마지막으로 수정된 시간정보를 헤더에 작성해준다 UTC 표기법으로 적어줌 응답 결과를 캐시에 저장할 때 데이터 최종 수정일도 저장된다 두 번째 요청 - 캐시 시간 초과 캐시 시간이 초과해서 다시 요청을 해야하는데 → 캐시에 최종 수정일 정보(Last-Modified)가 있다면 → 요청 헤더에 if-modified-since에 해당 날짜를 담아서 → 서버에 보낸다 서버의 해당 자료의 최종 수정일과 비교해서 → 데이터가 수정이 안되었을 경우 응답 메세지에 이를 담아서 알려준다 HTTP Body는 응답 데이터에 없다 상태코드는 304 Not Modified로 → 변경된 것이 없다는 것을 알린다 전송 데이터는 Body가 없기에 헤더만 포함된 0.1M만 전송 (네트워크 부하가 줄어든다) 클라이언트에서는 해당 응답을 받은 뒤 캐시를 갱신해주고 다시 일정시간 유효하게 된다 🔸 정리123456- 캐시 유효 시간이 초과해도, 서버의 데이터가 갱신되지 않으면- 304 Not Modified + 헤더 메타 정보만 응답 (Body X)- 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신- 클라이언트는 캐시에 저장되어 있는 데이터 재활용- 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드- 매우 실용적인 해결책 예시) 구글에 hello 아무 이미지 더블 클릭 → ctrl + R 새로고침 ✅ 검증 헤더와 조건부 요청2 검증 헤더 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터 Last-Modified, ETag 조건부 요청 헤더 검증 헤더로 조건에 따른 분기 if-Modified-since : Last-Modified 사용 if-None-Match : ETag 사용 조건이 만족하면 200 ok 조건이 만족하지 않으면 304 Not Modified If-Modified-Since 이후에 데이터가 수정되었으면? 데이터 미변경의 경우 (false) 캐시 : 2020-11-10-10:10:10 서버 : 2020-11-10-10:10:10 응답 메시지 : 상태코드 304 Not Modified, 헤더 데이터만 전송 전송용량이 body 데이터 없이 보내므로 매우 적음 데이터 변경의 경우 (true) 캐시 : 2020-11-10-10:10:10 서버 : 2020-12-24-23:22:11 200 OK, 모든 데이터 전송 (BODY 포함) 전송용량이 데이터 포함되므로 (1.1Mb - 헤더 0.1, 바디 1.0) 🔸 Last-Modified - If-Modified-Since 단점 1초 미만 단위로 캐시 조정 불가능 (시간 단위의 최소단위가 초라서) 날짜 기반의 로직을 사용한다 데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터의 결과가 똑같은 경우 서버에서 별도의 캐시 로직을 관리하고 싶은 경우 예) 데이터의 변경이 없는 주석과 같은 영향이 없는 변경 내에서 캐시를 유지하고 싶은 경우 (날짜가 변경되므로 변경된걸로 인지) ➡️ 이를 해결하는 법 → ETag 🔸 ETag, If-None-Match ETag (Entity Tag) 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠예) ETag: “v1.0”, ETag: “a2jiodwjekjl3” 데이터가 변경되면 이 이름을 바꾸어서 변경함 (Hash를 다시 생성)예) ETag:”aaaa” → ETag:”bbbb” 진짜 단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기 방식은 검증 헤더가 동일하다 → 이름만 바뀜 헤더에 ETag를 작성해 응답 클라이언트의 캐시에서 ETag 값을 저장 시간이 초과되면 → 다시 요청 → If-None-Match를 요청 헤더에 작성 🔸 정리123456- 진짜 단순하게 ETag만 서버에 보내서 같으면 유지, 다르면 다시 받기- **캐시 제어 로직을 서버에서 완전히 관리**- 클라이언트는 단순히 이 값을 서버에 제공(클라는 캐시 메커니즘을 모름)- 예) - 서버는 배타 오픈 기간인 3일 동안 파일이 변경되어도 ETag 동일하게 유지 - 애플리케이션 배포 주기에 맞추어 ETag 모두 갱신 ✅ 캐시와 조건부 요청 헤더 Cache-Control : 캐시 제어 Pragma : 캐시 제어 (하위 호환) Expires: 캐시 유효 기간 (하위 호환) 🔸 Cache-Control - 캐시 지시어 Cache-Control : max-age → 캐시 유효 시간, 초 단위 Cache-Control : no-cache → 데이터는 캐시해도 되지만, 항상 origin 서버에 검증하고 사용 Cache-Control : no-store → 데이터에 민감한 정보가 있으므로 저장하면 안됨 🔸 Pragma Pragma : no-cache HTTP 1.0 하위 호환 🔸 Expires - 캐시 만료일 지정expires: Mon, 01 Jan 1990 00:00:00 GMT 캐시 만료일을 정확한 날짜로 지정 HTTP/1.0부터 사용했다 지금은 더 유연한 초단위의 Cache-Control: max-age=”sec”을 사용한다 max-age를 함께쓰면 expires는 무시된다","link":"/2022/02/17/http/HTTP-%EC%BA%90%EC%8B%9C%EC%99%80-%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%9A%94%EC%B2%AD/"},{"title":"11. HTTP-프록시 캐시무효화","text":"✅ 프록시 서버 🔹 원(origin) 서버 직접 접근 🔹 프록시 캐시 도입 Cache-Control ✅ 캐시 무효화 🔸 no-cache vs mush-revalidate 참고 : https://velog.io/@dnstlr2933/HTTP-헤더캐시와-조건부-요청 ✅ 프록시 서버🔹 원(origin) 서버 직접 접근 예시로, 대략 0.5초 가량 기다려야 해당 이미지를 다운 → 더 많은 시간이 걸릴 수 있다 ➡️ 이를 해결하기 위해 프록시 캐시 도입 🔹 프록시 캐시 도입 Cache-Control Cache-Control: public 응답이 public 캐시에 저장되어도 된다 Cache-Control: private 응답이 해당 사용자만을 위한 것이다, private 캐시에 저장해야 한다(기본값) Cache-Control: s-maxage 프록시 캐시에만 적용되는 max-age이다 Age: 60 (HTTP 헤더) 원 서버에서 응답 후 프록시 캐시 서버내에 머무는 시간(초) ✅ 캐시 무효화확실한 캐시 무효화 응답 통장 잔고, 비밀번호 등 개인정보에 해당하는 정보로 절대 캐시에 보관해서는 안되는 데이터를 캐시에 보관하는 것을 막기위해 넣어야 하는 헤더이다. 충분히 넣어줘야 한다 Cache-Control: no-cache, no-store, must-revalidate Pragma: no-cache (HTTP 1.0 하위 호환을 위해서) Cache-Control: no-cache 데이터는 캐시해도 되지만, 항상 원 서버에 검증하고 사용 (이름에 주의 - 캐시를 안하는것 아니다 !) Cache-Control: no-store 데이터에 민감한 정보가 있으므로 저장하면 안된다 메모리에서 사용하고 최대한 빨리 삭제 no-cache와 함께 조합 Cache-Control: must-revalidate 캐시 만료 후 최초 조회시 원 서버에 검증해야한다 원 서버에 접근 실패시 반드시 오류가 발생해야 한다 - 504(Gateway Timeout) must-revalidate는 캐시유효 시간이라면 캐시를 사용한다 Pragma: no-cache HTTP/1.0 버전인 경우 Cache-Control을 모르므로 하위호환을 위해 사용 🔸 no-cache vs mush-revalidate 그런데 프록시 서버에서 연결에 장애가 발생하면?? 만약 은행 잔고 데이터라면? → 이전의 잔고 데이터가 나올 수 있어 보안상 문제 그래서 사용하는 것 → must-revalidate","link":"/2022/02/17/http/HTTP-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%BA%90%EC%8B%9C%EB%AC%B4%ED%9A%A8%ED%99%94/"},{"title":"2. URI 웹브라우저 요청 흐름","text":"📌 URI와 웹 브라우저 요청 흐름 📌 URI와 웹 브라우저 요청 흐름 ✅ URI 🔹 URL 문법 분석 🔸 scheme 🔸 userinfo 🔸 host 🔸 path 🔸 query 🔸 fragment ✅ 웹 브라우저 요청 흐름 🔸 HTTP 메시지 전송 이미지 참고: https://velog.io/@dnstlr2933/HTTP-웹-기본학습#uri와-웹-브라우저-요청-흐름 ✅ URI Uniform Resource Identifier URI는 locator, name 둘다 또는 추가로 분류될 수 있다 URI → URL + URN Uniform : 리소스 식별하는 통일된 방식 Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음) Identifier : 다른 항목과 구분하는데 필요한 정보 URL - locator : 리소스가 있는 위치를 지정 URN - Name : 리소스에 이름을 부여 위치는 변할 수 있지만, 이름은 변하지 않는다 URI == URL 같은 의미라고 볼 수 있다 🔹 URL 문법 분석scheme://[userinfo@]host[:port][/path][?query][#fragment] https://www.google.com/search?q=hello&amp;hl=ko 프로토콜 : https 호스트명 : www.google.com 포트번호 : 443 패스 : /search 쿼리 파라미터 : q=hello&amp;hl=ko 🔸 scheme 주로 프로토콜 사용 프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙 http → 80, https → 443, 포트는 생략 가능 https는 http에 보안 추가 🔸 userinfo 거의 사용하지 않는것으로 URL에 사용자 정보를 포함해서 인증할 때 사용한다 🔸 host 호스트명 도메인명 또는 IP주소를 직접 사용 🔸 path 리소스 경로로 계층적 구조를 갖는다 /home/file.jpg 🔸 query key=value 형태 ?로 시작, &amp;로 추가 가능 → ?keyA=valueA&amp;keyB=valueB query parameter, query string으로 불린다 🔸 fragment html 내부 북마크 등에 사용 서버에 전송하는 정보 아님 ✅ 웹 브라우저 요청 흐름 https://velog.io/@dnstlr2933/HTTP-웹-기본학습#uri와-웹-브라우저-요청-흐름 웹에 위와 같은 URL을 입력하게 되면 HTTP 요청 메시지가 생성된다 12GET/search?q=hello&amp;hl=ko HTTP/1.1Host: www.google.com 🔸 HTTP 메시지 전송 생성된 패킷의 모습 과정은 TCP/IP패킷에 전송 데이터로 http 메시지가 들어간 모습이다 이 패킷이 인터넷 망을 돌다가 원하는 IP주소에 도착하게 되면 해당 서버는 요청 패킷을 받아서 TCP/IP패킷은 벗겨버리고 전송 데이터인 HTTP메시지를 확인하게 된다 http메시지를 확인한 서버는 HTTP 응답 메시지를 다시 클라이언트에게 전달하게 된다 1234567HTTP/1.1 200 OKContent-Type: text/html;charset=UTF-8Content-Length: 3423&lt;html&gt; &lt;boldy&gt;...&lt;/body&gt;&lt;/html&gt; 요청 패킷을 받은 구글서버는 위와 같은 http 응답 메시지를 만들고 다시 TCP/IP 패킷을 씌워서 응답패킷을 인터넷 망에 올려서 전달해준다 최종적으로 요청패킷을 보냈던 웹브라우저(클라이언트)는 응답 패킷을 받고 해당 패킷의 HTTP 메시지를 열어서 HTTP 메시지 안에 들어있는 html 내용물을 웹 브라우저 상에 띄어서 보게 된다","link":"/2022/01/27/http/URI-%EC%9B%B9%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/"},{"title":"1. 인터넷 네트워크","text":"📌 인터넷 네트워크 📌 인터넷 네트워크 정리 ✅ 인터넷 통신 🔸 인터넷에서 컴퓨터 둘은 어떻게 통신할까? ✅ IP (인터넷 프로토콜) 🔸 인터넷 프로토콜 역할 🔸 IP 프로토콜의 한계 ✅ TCP, UDP 🔸 인터넷 프로토콜 스택의 4계층 🔹 TCP 특징 🔸 연결 지향 🔸 데이터 전달 보증 🔸 순서 보장 🔸 UDP 특징 ✅ PORT ✅ DNS (Domain Name System) 이미지 참고: https://velog.io/@dnstlr2933/HTTP-웹-기본학습 정리123456789101112# 복잡한 인터넷 망을 메시지 보내기 위해서1. 인터넷 프로토콜 (IP)가 존재 -&gt; 하지만 ip만으로는 메시지가 도착했는지, 순서가 꼬일수도 해결책은?2. TCP 프로토콜이 해결- UDP는 IP랑 똑같은데 PORT 정도만 추가되는 백지 + 애플리케이션 확장 기능3. PORT = 같은 IP에서 동작하는 애플리케이션을 구분4. IP는 변하기 쉽고 외우기 어려운데 도메인명을 등록해 쉽게 관리 ✅ 인터넷 통신🔸 인터넷에서 컴퓨터 둘은 어떻게 통신할까? https://velog.io/@dnstlr2933/HTTP-웹-기본학습 ➡️ 복잡한 인터넷 망을 두고 클라이언트끼리 통신을 주고받을 수 있는 이유 IP 인터넷 프로토콜 ✅ IP (인터넷 프로토콜) 우선적으로 보내고자하는 내 클라이언트가 IP주소를 부여받아야 하고, 받고자하는 상대방도 IP주소가 있어야한다 IP 주소가 부여받아야 한다. 그리고 나서 출발 주소, 목적 주소를 알고 메시지를 인터넷에 던진다 노드로 연결된 인터넷끼리 주고 받다가 맞는 IP에 보냄 🔸 인터넷 프로토콜 역할 지정한 IP 주소에 데이터 전달 패킷(Packet)이라는 통신 단위로 데이터 전달 IP 패킷 정보 → 출발지 IP, 목적지 IP, 기타 하지만 패킷만으로는 한계가 있다 🔸 IP 프로토콜의 한계 비연결성 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송 비 신뢰성 중간에 패킷이 사라지면? 패킷이 순서대로 안오면? 프로그램 구분 같은 ip를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면? ➡️ 이런 한계를 해결하기 위해 TCP / UDP가 등장 ✅ TCP, UDP🔸 인터넷 프로토콜 스택의 4계층 애플리케이션 계층 - HTTP, FTP 전송 계층 - TCP, UDP 인터넷 계층 - IP 네트워크 인터페이스 계층 https://velog.io/@dnstlr2933/HTTP-웹-기본학습 하나하나 봐보면 IP 패킷 정보 → 출발지 ip, 목적지 ip 패킷 = 패키지 + 버켓의 합성어, 즉 담는 공간이라 보자 TCP/IP 패킷 정보 → ip 패킷 외에도 출발지, 목적지 PORT, 전송제어, 순서, 검증 정보 🔹 TCP 특징전송 제어 프로토콜 - Transmission Control Protocol 연결 지향 - TCP 3-way handshake (가상연결) 데이터 전달 보증 순서 보장 신뢰할 수 있는 프로토콜 대부분의 애플리케이션에서 TCP를 사용 결국 이러한 특징들은 TCP에서 전송 제어, 순서등에서 처리하기에 가능한 특징들이다 특징을 살펴보면 🔸 연결 지향 클라이언트와 서버가 서로 SYN 과 ACK를 보냄으로 서로를 확인하고 → 데이터를 전송 🔸 데이터 전달 보증 🔸 순서 보장 패킷2가 와야하는데 패킷3이 왔네? → 뒤에 전부 버리고 다시 패킷2 부터 요청 🔸 UDP 특징→ PORT 하나의 ip에서 여러 어플리케이션을 분리하는 것 사용자 데이터그램 프로토콜(User Datagram Protocol) 하얀 도화지에 비유(기능이 거의 없음) 연결지향 - TCP 3 way handshake X 데이터 전달 보증 X 순서 보장 X 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름 정리 IP와 거의 같다. +PORT +체크섬 정도만 추가 애플리케이션에서 추가 작업 필요 ➡️ UDP를 왜 쓰는가? TCP는 최적화가 어렵다. UDP는 아무것도 없기에 직접 만들어 사용 ✅ PORT➡️ 한번에 둘 이상 연결해야 하면 어떻게 할까? IP패킷들이 서버에서 클라이언트로 들어올텐데 이때 어떻게 해당 패킷들을 구별해서 필요한 프로그램에게 전달할 것인가? → 포트번호를 부여 TCP에서 패킷에 출발지의 PORT번호 + 도착지의 PORT번호 정보를 담는다 사실상 패킷 → TCP/IP 패킷으로 구성 같은 IP내에서 프로세스를 구분하기 위해 PORT를 사용하는 것 비유 → IP : 아파트 , PORT : 동, 호수 개념 위 그림에 맞게 설명 하면 클라이언트 IP 주소로 패킷구성(ip, port) 웹 브라우저 요청으로 서버에 도착 port는 80 서버에서 패킷을 열어보니 ip주소와 port를 보고 10010 포트인걸 보니 웹브라우저구나 생각 ✅ DNS (Domain Name System)➡️ IP의 문제점 IP는 기억하기 어렵다 IP는 변경될 수 있다 이를 해결하기 위해 DNS이 탄생 전화번호부 같은 도메인 명을 IP주소로 변환 (이름 - 번호) 설명하자면 도메인 명을 사고 IP주소를 등록 클라에서 해당 도메인명으로 접근 DNS서버가 등록된 도메인명의 IP주소를 반환 클라는 반환받은 IP주소를 이용해서 서버에 접속 → 결국 IP주소를 외울 필요 없고, 추후에 IP주소가 변경되더라도 DNS서버에 등록된 IP주소만 변경하면 DNS는 변경되지 않는다","link":"/2022/01/25/http/%EC%9D%B8%ED%84%B0%EB%84%B7-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"},{"title":"Interactive-addition","text":"✅ 인터랙티브 교차 페이징 사진 여러개를 position fixed로 겹쳐서 JS에 의해 사진이 달라지는 교차페이지 123456//선택된 컨텐츠랩 활성contentWrap[pageNum].classList.add(&quot;active&quot;);for (var i = 0; i &lt; 4; i++) { //활성된 컨텐츠랩 내부 이미지들 활성 contentWrap[pageNum].getElementsByTagName(&quot;img&quot;)[i].classList.add(&quot;active&quot;);} ✅ translateZ 활용한 입체적인 페이지 translateZ : 앞 뒤로 움직여서 입체감을 높여준다 perspective : 깊이감을 준다. 적으면 변화가 빠르고, 높으면 변화가 천천히 123456789101112131415161718192021222324let scrollTop = 0;let imageAll;let totalNum = 0;window.onload = function () { progressBar = document.getElementsByClassName(&quot;progressBar&quot;)[0]; imageAll = document.querySelectorAll(&quot;.parallax_image&quot;); totalNum = imageAll.length; window.addEventListener(&quot;scroll&quot;, scrollFunc);};function scrollFunc(e) { scrollTop = this.scrollY; for (var i = 0; i &lt; totalNum; i++) { imageAll[i].style.transform = &quot;perspective(400px) translateZ(&quot; + scrollTop / (5 * (totalNum - i)) + &quot;px)&quot;; // imageAll[i].style.transform = &quot;perspective(400px) translateZ(&quot;+ scrollTop/5 +&quot;px)&quot;; 동시에 움직여 입체감이 없다 }}","link":"/2022/01/15/interactivek/Interactive-addition/"},{"title":"Interactive mouse","text":"📌 Mouse를 활용한 인터렉티브✅ mouse move 활용123window.addEventListener(&quot;mousemove&quot;, function(e) { console.log(e.clientX, e.clientY);} 위에 처럼 마우스 X, Y 좌표가 직접 console에 찍힌다. 1document.getElementsByClassName(&quot;className&quot;)[0]; 배열로 넘어오기 때문에 첫번째 요소인 [0]을 선택해준다. ✅ requestAnimationFrame == loop loop라는 자연스럽게 움직이게 활용 화려한 애니메이션 &amp; 3D 컨텐츠에 활용 12345function loop() { console.log(&quot;계속 실행됩니다.&quot;); window.requestAnimationFrame(loop);} ✅ 자연스러운 마우스 움직임 CSS 속성을 JS에서 사용하는 방법 12345item.style.transform = &quot;translate(&quot;+ x값 + &quot;px, &quot; + Y값 +&quot;px)&quot;;CSS : item { transform : translate(100px, 100px); }JS: item.style.transform = &quot;translate(100px, 100px)&quot;; ➡️ 마우스 자연스러운 움직이는 공식 1mx += (x - mx) * speed; 움직일 값 += (현재 마우스 위치 - 바로 전 위치 값) * 0.001; 현재 위치가 100, 마우스 현재 위치가 150이라고 치면! 100부터 50만큼 이동을 하면 되는데.한 번에 50을 더해주면 바로 착! 이동을 하니까 조금씩 작은 수를 더해주는 겁니다.100 += (150 - 100) * 0.001; 이렇게 계산 된 수를 계속 더해주는 방식. ✅ transition, easing (가속도)easing test transition은 시간에 대한 변화량이다. easing은 가속도로써 변화를 줄 수 있다. 🔸 정리 마우스의 x, y 좌표를 JS로 직접 찍어보면서 기본 개념 다루기 requestAnimationFrame을 이용하여 콜백함수로 60프레임을 &gt; 다루어 자연스러운 animation 효과를 나타낸다. 마우스의 자연스러운 움직임을 위해서 시간차에 따른 변화량을 &gt; 사용 (loop = requestAnimationFrame) CSS속성을 JS로 나타내어 필요한 부분, 세심한 부분에 CSS &gt; 속성을 대입한다.","link":"/2022/01/14/interactivek/Interactive-mouse/"},{"title":"Interactive-scroll","text":"📌 스크롤 값을 활용한 인터랙티브 패럴랙스는 레이어가 존재해야 한다. (멈춰 있는 레이어, 천천히 움직이는 레이어, 빨리 움직이는 레이어, 시선) 스크롤 값을 받아오는 것 부터 시작 Parallax Scrolling : 사용자가 스크롤할 때 배경 이미지가 느리게 움직이며, 근거리를 빨리 움직이는 즉 입체감을 느낄 수 있는 디자인 기법 스크롤을 움직일 때마다 transform의 translate, scale, opacity 등 변화를 직접 준다. CSS 그라디언트 적용 1background: linear-gradient(150deg, tomato, orange, white); ✅ 스크롤 값 받아오기123window.addEventListener(&quot;scroll&quot;, function (e) { scrollTop = document.documentElement.scrollTop;}); ✅ 화면 width 길이의 스크롤 바 구현. 백분율 구하는 공식. 가로 퍼센트값 = 현재 스크롤 탑 위치 / (문서 전체 길이 - 윈도우 창 높이 ) * 100; 1234per = Math.round( scrollTop / (document.documentElement.scrollHeight - window.innerHeight) ) * 100; ✅ scrollTop 패럴렉스 구현12345678910window.addEventListener(&quot;scroll&quot;, function (e) { scrollTop = document.documentElement.scrollTop; let per = Math.ceil( (scrollTop / (document.body.scrollHeight - window.outerHeight)) * 100 ); bar.style.height = per + &quot;%&quot;; cloudWrap.style.transform = &quot;translate(0,&quot; + scrollTop / 1.2 + &quot;px)&quot;;}); (윈도우 기준) 스크롤 한 번에 100픽셀씩 이동 모두가 100씩 이동할때 지정한 오브젝트만 100 / 1.2 = 83.3 씩 이동을 하게 되어 느리게 움직이는 느낌 반대로 100 * .8 로 해도 비슷한 결과","link":"/2022/01/15/interactivek/Interactive-scroll/"},{"title":"Element 렌더링","text":"📌 Element 렌더링https://ko.reactjs.org/docs/rendering-elements.html 엘리먼트는 React 앱의 가장 작은 단위 브라우저 DOM 엘리먼트와 달리 React 엘리먼트는 일반 객체이며(plain object) 쉽게 생성할 수 있습니다. React DOM은 React 엘리먼트와 일치하도록 DOM을 업데이트한다 1&lt;div id=&quot;root&quot;&gt;&lt;/div&gt; 이 안에 들어가는 모든 엘리먼트를 React DOM에서 관리하기 때문에 이것을 “루트(root)” DOM 노드라고 부른다 React 엘리먼트를 루트 DOM 노드에 렌더링하려면 [ReactDOM.render()](https://ko.reactjs.org/docs/react-dom.html#render)로 전달 UI를 업데이트하는 유일한 방법은 새로운 엘리먼트를 생성하고 이를 ReactDOM.render()로 전달 1234567891011function tick() { const element = ( &lt;div&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;h2&gt;It is {new Date().toLocaleTimeString()}.&lt;/h2&gt; &lt;/div&gt; ); ReactDOM.render(element, document.getElementById(&quot;root&quot;));}setInterval(tick, 1000);","link":"/2022/01/20/react/Element-%EB%A0%8C%EB%8D%94%EB%A7%81/"},{"title":"Hooks","text":"📌HooksHook의 개요 - React 📌Hooks ✅ useState 🔹 useState 여러 번 사용하기 ✅ useEffect 🔹 마운트될 때만 실행하고 싶을 때 🔹 특정 값이 업데이트될 때만 실행하고 싶을 때 🔹 뒷정리하기 ✅ useReducer 🔹 인풋 상태 관리하기 ✅ useMemo ✅ useCallback ✅ useRef 🔸 로컬 변수 사용하기 ✅ 커스텀 Hooks 만들기 123456789101112131415161718192021222324252627# 정리1. Hooks은 react 모듈에서 불러온다2. **useState** = 상태관리3. **useEffect** = 렌더링될 때마다 특정 작업 수행 설정- callback 호출로 나타낸다- 업데이트는 보여주고 싶지 않을 때 -&gt; 두번째 파라미터 [ ]- 특정 값만 보여주고 싶을 때 -&gt; [검사하고 싶은 값 ]4. **useReducer** = 다양한 상태 업데이트- 리듀서 함수 만들기 (state, action= type 스위치, return)- 상태, dispatch(리듀서 함수 호출)5. **useCallback** = 만들어놨던 함수를 재사용- [] -&gt; 처음 렌더링될때 만 생성- [ 바뀌는 값 ]6. **useRef** = ref를 쉽게 사용- current7. **custom Hook** = 여러 컴포넌트에서 비슷한 기능 공유 ✅ useState useState 함수의 파라미터에는 = 상태의 기본값 이 함수가 호출되면 배열을 반환 → (상태 값 , 상태를 설정하는 함수) 1234567891011121314151617import { useState } from &quot;react&quot;;const Counter = () =&gt; { const [value, setValue] = useState(0); return ( &lt;div&gt; &lt;p&gt; 현재 카운터 값 &lt;b&gt;{value}&lt;/b&gt; &lt;/p&gt; &lt;button onClick={() =&gt; setValue(value + 1)}&gt;+1&lt;/button&gt; &lt;button onClick={() =&gt; setValue(value - 1)}&gt;-1&lt;/button&gt; &lt;/div&gt; );};export default Counter; 🔹 useState 여러 번 사용하기123456789101112131415161718192021222324252627282930313233import { useState } from &quot;react&quot;;const Info = () =&gt; { const [name, setName] = useState(&quot;&quot;); const [nickname, setNickname] = useState(&quot;&quot;); const OnChangeName = (e) =&gt; { setName(e.target.value); }; const OnChnageNickname = (e) =&gt; { setNickname(e.target.value); }; return ( &lt;div&gt; &lt;div&gt; &lt;input value={name} onChange={OnChangeName}&gt;&lt;/input&gt; &lt;input value={nickname} onChange={OnChnageNickname}&gt;&lt;/input&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; &lt;b&gt;이름:&lt;/b&gt; {name} &lt;/div&gt; &lt;div&gt; &lt;b&gt;닉네임:&lt;/b&gt; {nickname} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};export default Info; ✅ useEffect 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook 123456789101112131415import { useState, useEffect } from &quot;react&quot;;const Info = () =&gt; { const [name, setName] = useState(&quot;&quot;); const [nickname, setNickname] = useState(&quot;&quot;); useEffect(() =&gt; { console.log(&quot;렌더링이 완료&quot;); console.log({ name, nickname, }); });... 🔹 마운트될 때만 실행하고 싶을 때 useEffect에서 설정한 함수를 컴포넌트가 화면에 맨 처음 렌더링될 때만 실행하고, 업데이트될 때는 실행하지 않으려면 → 함수의 두번째 파라미터로 비어 있는 배열을 넣어주면 된다 1234567useEffect(() =&gt; { console.log(&quot;렌더링이 완료&quot;); console.log({ name, nickname, });}, []); 🔹 특정 값이 업데이트될 때만 실행하고 싶을 때 value값이 바뀔 때만 특정 작업 수행 → 두번째 파라미터로 전달되는 배열 안에 검사하고 싶은 값 1234567useEffect(() =&gt; { console.log(&quot;렌더링이 완료&quot;); console.log({ name, nickname, });}, [name]); 🔹 뒷정리하기 useEffect는 기본적으로 렌더링되고 난 직후마다 실행되며, 두 번째 파라미터 배열에 무엇을 넣는지에 따라 실행되는 조건이 달라진다 뒷정리 함수 → 컴포넌트가 언마운트되기 전이나 업데이트 직전에 어떠한 작업을 수행하고 싶을 때 12345678useEffect(() =&gt; { console.log(&quot;effect&quot;); console.log(name); return () =&gt; { console.log(&quot;cleanUp&quot;); console.log(name); };}, [name]); 123456789101112131415161718const App = () =&gt; { const [visible, setVisible] = useState(false); return ( &lt;div&gt; &lt;button onClick={() =&gt; { setVisible(!visible); }} &gt; {&quot; &quot;} {visible ? &quot;숨기기&quot; : &quot;보이기&quot;}{&quot; &quot;} &lt;/button&gt; &lt;hr /&gt; {visible &amp;&amp; &lt;Info /&gt;} &lt;/div&gt; );}; 렌더링될 때마다 뒷정리 함수가 계속 나타나는 것을 확인 뒷정리 함수가 호출될 때는 업데이트되기 직전의 값을 보여줌 ✅ useReducer useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook 리듀서는 현재 상태, 업데이트를 위해 필요한 정보를 담은 액션 값을 전달받아 새로운 상태를 반환하는 함수 리듀서 함수에서 새로운 상태를 만들 때는 반드시 불변성을 시켜 주어야 한다 12345678function reducer(state, action) { return {...} // 불변성을 지키면서 업데이트한 새로운 상태를 반환}// 액션 값 형태{ type: &quot;INCREMENT&quot;} 예시 1234567891011121314151617181920212223242526272829import { useReducer } from &quot;react&quot;;function reducer(state, action) { // action.type에 따라 다른 작업 수행 switch (action.type) { case &quot;INCREMENT&quot;: return { value: state.value + 1 }; case &quot;DECREMENT&quot;: return { value: state.value - 1 }; default: return state; }}const UseReducer = () =&gt; { const [state, dispatch] = useReducer(reducer, { value: 0 }); return ( &lt;div&gt; &lt;p&gt; 현재 카운터 값 &lt;b&gt;{state.value}&lt;/b&gt; &lt;/p&gt; &lt;button onClick={() =&gt; dispatch({ type: &quot;INCREMENT&quot; })}&gt;+1&lt;/button&gt; &lt;button onClick={() =&gt; dispatch({ type: &quot;DECREMENT&quot; })}&gt;-1&lt;/button&gt; &lt;/div&gt; );};export default UseReducer; useReducer (리듀서 함수, 해당 리듀서의 기본값) 이 Hook을 사용하면 state값 = 현재 가리키고 있는 상태, dispatch = 액션을 발생시키는 함수 dispatch(action)과 같은 형태로, 함수 안에서 파라미터로 액션 값을 넣어 주면 리듀서 함수가 호출되는 구조 useReducer 가장 큰 장점 → 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 것 🔹 인풋 상태 관리하기123456789101112131415161718192021222324252627282930313233343536373839import { useReducer } from &quot;react&quot;;function reducer(state, action) { return { ...state, [action.name]: action.value, };}const InfoReducer = () =&gt; { const [state, dispatch] = useReducer(reducer, { name: &quot;&quot;, nickname: &quot;&quot;, }); const { name, nickname } = state; const OnChange = (e) =&gt; { dispatch(e.target); }; return ( &lt;div&gt; &lt;div&gt; &lt;input name=&quot;name&quot; value={name} onChange={OnChange}&gt;&lt;/input&gt; &lt;input name=&quot;nickname&quot; value={nickname} onChange={OnChange}&gt;&lt;/input&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; &lt;b&gt;이름:&lt;/b&gt; {name} &lt;/div&gt; &lt;div&gt; &lt;b&gt;닉네임:&lt;/b&gt; {nickname} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};export default InfoReducer; ✅ useMemo useMemo를 사용하면 함수 컴포넌트 내부에서 발생하는 연산을 최적화할 수 있다 예로 리스트에 숫자를 추가하면 숫자들의 평균을 보여 주는 컴포넌트 작성 123456789101112131415161718192021222324252627282930313233343536373839import { useState } from &quot;react&quot;;const getAverage = (numbers) =&gt; { console.log(&quot;평균값 계산중..&quot;); if (numbers.length === 0) return 0; const sum = numbers.reduce((a, b) =&gt; a + b); return sum / numbers.length;};const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(&quot;&quot;); const onChange = (e) =&gt; { setNumber(e.target.value); }; const onInsert = (e) =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(&quot;&quot;); }; return ( &lt;div&gt; &lt;input value={number} onChange={onChange}&gt;&lt;/input&gt; &lt;button onClick={onInsert}&gt;등록&lt;/button&gt; &lt;ul&gt; {list.map((value, index) =&gt; ( &lt;li key={index}&gt;{value}&lt;/li&gt; ))} &lt;/ul&gt; &lt;div&gt; &lt;b&gt;평균값: &lt;/b&gt; {getAverage(list)} &lt;/div&gt; &lt;/div&gt; );};export default Average; 이렇게 하면 숫자를 등록할 때뿐만 아니라 인풋 내용이 수정될 때도 우리가 만든 함수 getAverage 함수가 호출됨 → 인풋 내용이 바뀔 때는 평균값을 다시 계산할 필요 없음 useMemo Hook을 사용하여 최적화 렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고 ([바뀌는 값]) , 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용하는 방식 1234567891011121314151617const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(&quot;&quot;); const onChange = (e) =&gt; { setNumber(e.target.value); }; const onInsert = (e) =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(&quot;&quot;); }; const avg = **useMemo**(() =&gt; getAverage(list), [list]); return ( ... ) ✅ useCallback 주로 렌더링 성능을 최적화해야 하는 상황에서 사용 이 Hook을 사용하면 만들어 놨던 함수를 재사용할 수 있다 예로 방금 구현한 onChange, onInsert 함수 선언을 컴포넌트가 리렌더링될 때마다 새로 만들어진 함수를 사용하게 된다 → 컴포넌트 갯수가 많아지면 최적해 주는 것이 좋다 1234567891011121314const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(&quot;&quot;); const onChange = useCallback( (e) =&gt; { setNumber(e.target.value); }, **[]**); // 컴포넌트가 처음 렌더링될 때만 함수 생성 const onInsert = useCallback((e) =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(&quot;&quot;); }, **[nubmer, list]**); **// number 혹은 list가 바뀌었을 때만 함수 생성**... useCallback (생성하고 싶은 함수, 배열) → 이 배열에는 어떤 값이 바뀌었을 때 함수를 새로 생성해야 하는지 명시하는 것 함수 내부에서 상태 값에 의존해야 할 때는 그 값을 반드시 두 번째 파라미터 안에 포함 예로 onInsert는 기존의 number, list를 조회해서 nextList를 생성하기 때문에 배열 안에 꼭 ✅ useRef useRef Hook은 함수 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해준다 123456789101112131415161718192021222324const Average = () =&gt; { const [list, setList] = useState([]); const [number, setNumber] = useState(&quot;&quot;); **const inputEl = useRef(null);** const onChange = useCallback((e) =&gt; { setNumber(e.target.value); }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성 const onInsert = useCallback( (e) =&gt; { const nextList = list.concat(parseInt(number)); setList(nextList); setNumber(&quot;&quot;); **inputEl.current.focus();** }, [number, list] ); // number 혹은 list가 바뀌었을 때만 함수 생성 const avg = useMemo(() =&gt; getAverage(list), [list]); return ( &lt;div&gt; &lt;input value={number} onChange={onChange} **ref={inputEl}**&gt;&lt;/input&gt; 🔸 로컬 변수 사용하기 컴포넌트 로컬 변수를 사용해야 할 때도 useRef를 사용 로컬 변수 : 렌더링과 상관없이 바뀔 수 있는 값을 의미 ✅ 커스텀 Hooks 만들기 여러 컴포넌트에서 비슷한 기능을 공유할 경우, 이를 Hook으로 작성하여 로직을 재사용 가능 1234567891011121314151617// 커스텀 Hookimport { useReducer } from &quot;react&quot;;function reducer(state, action) { return { ...state, [action.name]: action.value, };}export default function useInputs(initialForm) { const [state, dispatch] = useReducer(reducer, initialForm); const onChange = (e) =&gt; { dispatch(e.target); }; return [state, onChange];} 12345678910111213141516171819202122232425262728import useInputs from &quot;./useInputs&quot;;const InfoReducer = () =&gt; { const [state, onChange] = useInputs({ name: &quot;&quot;, nickname: &quot;&quot;, }); const { name, nickname } = state; return ( &lt;div&gt; &lt;div&gt; &lt;input name=&quot;name&quot; value={name} onChange={onChange}&gt;&lt;/input&gt; &lt;input name=&quot;nickname&quot; value={nickname} onChange={onChange}&gt;&lt;/input&gt; &lt;/div&gt; &lt;div&gt; &lt;div&gt; &lt;b&gt;이름:&lt;/b&gt; {name} &lt;/div&gt; &lt;div&gt; &lt;b&gt;닉네임:&lt;/b&gt; {nickname} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};export default InfoReducer;","link":"/2022/02/23/react/Hooks/"},{"title":"JSX","text":"📌JSXHello World - React 📌JSX ✅ JSX 소개 ✅ JSX에 표현식 포함하기 ✅ JSX문법 ✅ 기초 사용법 🔸 If문 사용 🔸 AND &amp;&amp; 🔸 OR || 🔸 인라인 스타일링 src/APP.js 불러오기 import로 불러오는 기능을 브라우저에서도 사용하기 위해 번들러를 사용 번들 : 파일을 묶듯이 연결하는 것. 대표적인 것 → 웹팩, Parcel, browserify 1234function App() { return ( ....)} function 키워드를 사용하여 컴포넌트를 만들었다 → 함수 컴포넌트라고 부른다. ✅ JSX 소개1const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;; JavaScript를 확장한 문법이다. React ‘엘리먼트’를 생성한다. JSX 장점 보기 쉽고 익숙하다 → JS만 사용한 코드와 JSX 비교 높은 활용도 → HTML 태그를 사용하고 컴포넌트도 JSX안에서 작성할 수 있다. 12345678910111213# ReactDOM.render- 컴포넌트를 페이지에 렌더링하는 역할- react-dom 모듈을 불러와 사용# 함수의 파라미터ReactDOM.render(페이지에 렌더링할 내용 JSX형태, JSX를 렌더링할 document 내부 요소 설정)# React.StrictMode- 레거시 기능들을 사용하지 못하게 하는 기능- 옛날 기능을 사용했을 때 경고를 출력 ✅ JSX에 표현식 포함하기1234const name = &quot;Josh Perez&quot;;const element = &lt;h1&gt;Hello, {name}&lt;/h1&gt;;ReactDOM.render(element, document.getElementById(&quot;root&quot;)); JSX의 중괄호 안에는 유효한 모든 javaScript 표현식을 넣을 수 있다 컴파일이 끝나면, JSX 표현식이 정규 JavaScript 함수 호출이 되고 JavaScript 객체로 인식 ✅ JSX문법 감싸인 요소 리액트 컴포넌트에서 요소 여러 개를 왜 하나의 요소로 꼭 감싸야 하는가? Virtual DOM에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 DOM 트리 구조로 이루어져야 한다는 규칙 또는 리액트 v16 도입된 Fragment 기능 사용 ✅ 기초 사용법 src/index.js에서 직접 고쳐도 되지만 모듈을 분리해 실행만 하게 src/App.js에서 수정해보자 12345678910111213import &quot;./App.css&quot;;function App() { const name = &quot;React&quot;; return ( &lt;div&gt; &lt;h1&gt;{name} 안녕? &lt;/h1&gt; &lt;h2&gt;React Document&lt;/h2&gt; &lt;/div&gt; );}export default App; 🔸 If문 사용 if (어쩌구) {저쩌구} 이게 안된다는 소리 JSX안에서 쓰는 삼항 연산자 → 조건문 ? 조건문 참일때 실행할 코드 : 거짓일 때 실행할 코드 1234function App() { const name = &quot;React&quot;; return &lt;div&gt;{name === &quot;React&quot; ? &lt;h1&gt;check&lt;/h1&gt; : null}&lt;/div&gt;;} 🔸 AND &amp;&amp; 조건이 맞으면 뜨고 안맞으면 안뜨게 &amp;&amp; 연산자로 조건부 렌더링 할 수 있는 이유 → 리액트에서 false를 렌더링할 때는 null과 마찬가지로 아무것도 나타나지 않기 때문 1234function App() { const name = &quot;React&quot;; return &lt;div&gt;{name === &quot;React&quot; &amp;&amp; &lt;h1&gt;react&lt;/h1&gt;}&lt;/div&gt;;} 🔸 OR || undefined만 반환하여 렌더링하는 상황을 만들때 1234function App() { const name = undefined; return &lt;div&gt;{name || &lt;h1&gt;react&lt;/h1&gt;}&lt;/div&gt;;} 🔸 인라인 스타일링 리액트에서 DOM 요소에 스타일을 적용할 때는 문자열 형태로 넣는 것이 아니라 객체 형태로 넣어주어야 한다. 카멜 표기법 → background-color X → backgroundColor JSX에는 class가 아닌 className으로 설정해 주어야 한다. (APP.css에서 설정하고 ) 123456789101112131415function App() { const name = &quot;React&quot;; return ( &lt;div style={{ backgroundColor: &quot;black&quot;, color: &quot;aqua&quot;, fontSize: &quot;48px&quot;, fontWeight: &quot;bold&quot;, }} &gt; {name} &lt;/div&gt; );} 12345678910function App() { const name = &quot;React&quot;; const style = { backgroundColor: &quot;black&quot;, color: &quot;aqua&quot;, fontSize: &quot;48px&quot;, fontWeight: &quot;bold&quot;, }; return &lt;div style={style}&gt;{name}&lt;/div&gt;;} 주석 12345678910111213function App() { const name = &quot;React&quot;; return ( &lt;div&gt; {/* 이렇게 주석 */} &lt;div className=&quot;react&quot; // 이렇게 할수도 있넹 &gt; {name} &lt;/div&gt; &lt;/div&gt; );}","link":"/2022/01/18/react/JSX/"},{"title":"React-Document","text":"📌React DocumentReact - 사용자 인터페이스를 만들기 위한 JavaScript 라이브러리 React는 사용자 인터페이스를 만들기 위한 JavaScript 라이브러리 📌React Document ✅ 선언형 ✅ 컴포넌트 기반 ✅ 간단한 컴포넌트 ✅ 상태를 가지는 컴포넌트 ✅ 외부 플러그인을 사용하는 컴포넌트 ✅ 리액트의 특징 ✅ Create React APP ✅ 선언형 상호작용이 많은 UI를 만들 때 → 어려움을 줄여줌 애플리케이션의 각 상태에 대해 → 뷰 만 설계 데이터가 변경됨에 따라 컴포넌트 → 갱신하고 렌더링 1234567**어떤 데이터가 변할 때마다 어떤 변화를 줄지 고민하는 것이 아니라그냥 기존 뷰를 날려 버리고 처음부터 새로 렌더링하는 방식**- 새롭게 리렌더링하면서 성능을 아끼고, 최적의 UX을 제공할 수 있을까? 데이터 업데이트시 업데이트한 값을 수정하는 것이 아니라, render 함수를 또 다시 호출 이때 render함수가 반환하는 결과를 DOM에 반영하지 않고, 이전에 render 함수가 만든 컴포넌트 정보와 현재 컴포넌트를 비교하여 -&gt; 둘의 차이를 최소한 연산으로 DOM 트리 업데이트 ✅ 컴포넌트 기반 컴포넌트 : 스스로 상태를 관리하는 캡슐화 조합해 복잡한 UI를 만듬 컴포넌트 로직 → 템플릿 X, Javascript로 작성 다양한 형식의 데이터를 앱 안에서 전달, DOM과는 별개로 상태를 관리 123456789# 컴포넌트- React 프로젝트에서 특정 부분이 어떻게 생길지 정하는 선언체- 재사용이 가능한 API로 수 많은 기능들을 내장- 컴포넌트 하나에서 해당 컴포넌트의 생김새와 작동 방식을 정의# 렌더링- 사용자 화면에 뷰를 보여 주는 것 ✅ 간단한 컴포넌트 React 컴포넌트는 render( ) 메서드를 구현 → 데이터를 입력받아 화면에 표시할 내용을 반환하는 역할 컴포넌트로 전달된 데이터는 render( ) 안에서 this.props를 통해 접근 1234# render()- 컴포넌트가 어떻게 생겼는지 정의하는 역할- 뷰가 어떻게 생겼고, 어떻게 작동하는지에 대한 정보를 지닌 객체를 반환 ✅ 상태를 가지는 컴포넌트 컴포넌트는 this.props를 이용해 → 입력 데이터 + 내부적인 상태 데이터를 가짐 이는 this.state로 접근할 수 있다. 컴포넌트의 상태 데이터가 바뀌면 → render()가 다시 호출되어 마크업 갱신 ✅ 외부 플러그인을 사용하는 컴포넌트 React는 다른 라이브러리나 프레임워크 함께 활용 ✅ 리액트의 특징 Virtual DOM을 사용하는 것 DOM : 객체로 문서 구조를 표현하는 방법으로 XML, HTML로 작성 Virtual DOM을 사용하면 → 실제 DOM에 접근하여 조작하는것이 아닌 추상화한 JS 객체를 구성하여 사용 1231. 데이터를 업데이트하면 전체 UI를 Virtual DOM에 리렌더링한다.2. 이전 Virtual DOM에 있던 내용과 현재 내용을 비교한다3. 바뀐 부분만 실제 DOM에 적용한다. ✅ Create React APP123npx create-react-app my-appcd my-appnpm start","link":"/2022/01/16/react/React-Document/"},{"title":"State","text":"📌 StateState and Lifecycle - React props → 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값, props를 바꾸려면 부모 컴포넌트에서 바꾸어 주어야 한다 state → 컴포넌트 내부에서 바뀔 수 있는 값을 의미한다 1234# state는 두가지 종류1. 클래스 컴포넌트 -&gt; state2. 함수 컴포넌트 -&gt; useState 함수를 통해 사용하는 state ✅ 클래스형 컴포넌트의 state1234567class Counter extends Component { constructor(props) { super(props); this.state = { number: 0, }; } state를 설정할 때 → constructor 메서드를 작성하여 설정 → 컴포넌트 생성자 메서드 클래스형 컴포넌트 → constructor 작성할때 반드시 → super(props)를 호출 이 함수가 호출되면 → 현재 클래스 컴포넌트가 상속받고 있는 리액트 component 클래스가 지닌 생성자 함수를 호출해준다 this.state 값에 초깃값 설정 → 컴포넌트의 state는 객체 형식 123456789101112131415render() { const { number } = this.state; return ( &lt;div&gt; &lt;h1&gt;{number}&lt;/h1&gt; &lt;button onClick={() =&gt; { this.setState({ number: number + 1 }); }} &gt; +1 &lt;/button&gt; &lt;/div&gt; ); } render 함수 → 현재 state를 조회 → this.state button 안에 onClick 값 props로 넣어줌 → 이벤트 설정 → 클릭 → this.setState → state 값 변경 🔸 state 객체 안에 여러 값이 있을 때12345678910111213141516171819202122232425class Counter extends Component { constructor(props) { super(props); this.state = { number: 0, fixedNumber: 0, }; } render() { const { number, fixedNumber } = this.state; return ( &lt;div&gt; &lt;h1&gt;{number}&lt;/h1&gt; &lt;h2&gt;바뀌지 않는 값: {fixedNumber}&lt;/h2&gt; &lt;button onClick={() =&gt; { this.setState({ number: number + 1 }); }} &gt; +1 &lt;/button&gt; &lt;/div&gt; ); }} 🔸 state를 constructor에서 꺼내기 state의 초깃값 지정을 위해 constructor 메서드를 선언했는데 또 다른 방식이 있다. 123456class Counter extends Component { state = { number: 0, fixedNumber: 0, }; render() { ...} } 🔸 this.setState에 객체 대신 함수 인자 전달1234onClick ={() =&gt; { this.setState({number: number + 1}) this.setState({number: this.state.number + 1})} this.setState를 두 번 사용하여도 숫자는 1씩 더해진다 → state 값이 바로 바뀌지 않기 때문 이에 해결책 → this.setState에 객체 대신에 함수를 인자로 넣어줌 1234this.setState((prevState, props) =&gt; { return { // 업데이트} prevState → 기존 상태, props → 현재 지니고 있는 props 가리킨다 1234onClick={() =&gt; { this.setState((prevState) =&gt; ({ number: prevState.number + 1,})); 🔸 this.setState 끝난 후 특정 작업 실행 (콜백)12345678910111213141516&lt;button onClick={() =&gt; { this.setState((prevState) =&gt; ({ number: prevState.number + 1, })); this.setState( { number: number + 1, }, () =&gt; { console.log(&quot;setState 호출&quot;); console.log(this.state); } ); }} &gt; ✅ 함수 컴포넌트 useState 함수 컴포넌트는 state 사용 할 수 없었다 → useState 함수를 사용해 state 사용 가능 Hooks를 사용 Hooks 사용 전에 배열 비구조화 할당 12345const array = [1, 2];const one = array[0];// 배열 비구조화 할당const [one, two] = array; 🔸 useState 사용하기 useState 함수의 인자에는 상태의 초깃값을 넣어줌 useState에서는 꼭 객체가 아니라 값의 형태는 자유다 함수를 호출하면 배열이 반환 배열 첫 번째 원소 : 현재상태 배열 두 번째 원소 : 상태를 바꾸어 주는 함수 → Setter 함수 1234567891011121314151617import { useState } from &quot;react&quot;;const Say = () =&gt; { const [message, setMessage] = useState(&quot;&quot;); const onClickEnter = () =&gt; setMessage(&quot;안녕히하세요!&quot;); const onClickLeave = () =&gt; setMessage(&quot;안녕히 가세요~&quot;); return ( &lt;div&gt; &lt;button onClick={onClickEnter}&gt;입장&lt;/button&gt; &lt;button onClick={onClickLeave}&gt;퇴장&lt;/button&gt; &lt;h1&gt;{message}&lt;/h1&gt; &lt;/div&gt; );};export default Say; 🔸 한 컴포넌트에서 useState 여러 번 사용12345678910111213141516171819202122232425262728import { useState } from &quot;react&quot;;const Say = () =&gt; { const [message, setMessage] = useState(&quot;&quot;); const onClickEnter = () =&gt; setMessage(&quot;안녕히하세요!&quot;); const onClickLeave = () =&gt; setMessage(&quot;안녕히 가세요~&quot;); const [color, setColor] = useState(&quot;black&quot;); return ( &lt;div&gt; &lt;button onClick={onClickEnter}&gt;입장&lt;/button&gt; &lt;button onClick={onClickLeave}&gt;퇴장&lt;/button&gt; &lt;h1 style={{ color }}&gt;{message}&lt;/h1&gt; &lt;button style={{ color: &quot;red&quot; }} onClick={() =&gt; setColor(&quot;red&quot;)}&gt; Red &lt;/button&gt; &lt;button style={{ color: &quot;green&quot; }} onClick={() =&gt; setColor(&quot;green&quot;)}&gt; Green &lt;/button&gt; &lt;button style={{ color: &quot;blue&quot; }} onClick={() =&gt; setColor(&quot;blue&quot;)}&gt; Blue &lt;/button&gt; &lt;/div&gt; );};export default Say; ✅ state를 사용할 때 주의사항 state 값을 바꿀 때 → setState 혹은 useState를 통해 전달받은 세터 함수를 사용해야 한다 배열이나 객체를 업데이트해야 할 때는 어떻게 해야 할까? 배열이나 객체 사본을 만들고 그 사본에 값을 업데이트한 후 → 사본 상태를 세터함수를 통해 업데이트","link":"/2022/01/23/react/State/"},{"title":"ref-DOM 이름달기","text":"📌 ref: DOM 이름 달기Forwarding Refs - React HTML에서 id를 사용 → DOM에 이름을 다는 것 처럼 → 리액트 프로젝트 내부에서 DOM에 이름을 다는 방법 = ref 개념 📌 ref: DOM 이름 달기 ✅ ref는 어떤 상황에서 사용해야 할까 🔹 클래스 컴포넌트 예제 🔸 DOM을 꼭 사용해야 하는 상황 ✅ ref 사용 🔸 1. 콜백 함수를 통한 ref 설정 🔸 2. createRef를 통한 ref 설정 ✅ 컴포넌트에 ref 달기 🔸 주의 ✅ ref는 어떤 상황에서 사용해야 할까 DOM을 꼭 직접적으로 건드려야 할 때 컴포넌트 만들기 input에 ref 달기 버튼을 누를 때마다 input에 포커스 추가 🔹 클래스 컴포넌트 예제123456789101112131415161718192021222324252627282930313233343536373839404142434445import React, { Component } from &quot;react&quot;;import &quot;./ValidationSample.css&quot;;class ValidationSample extends Component { state = { password: &quot;&quot;, clicked: false, validated: false, }; handleChange = (e) =&gt; { this.setState({ password: e.target.value, }); }; handleClick = () =&gt; { this.setState({ clicked: true, validated: this.state.password === &quot;0000&quot;, }); }; render() { return ( &lt;div&gt; &lt;input type=&quot;password&quot; value={this.state.password} onChange={this.handleChange} className={ this.state.clicked ? this.state.validated ? &quot;success&quot; : &quot;failure&quot; : &quot;&quot; } &gt;&lt;/input&gt; &lt;button onClick={this.handleClick}&gt;검증&lt;/button&gt; &lt;/div&gt; ); }}export default ValidationSample; input의 className 값은 버튼을 누르기 전에는 비어 있는 문자열을 전달 → 버튼 누른 후에는 검증 결과에 따라 → success / failure 값을 설정 App 함수 컴포넌트 → 클래스형 컴포넌트 전환 왜? → ref를 사용할 것이기에 바꿔줌 12345class App extends Component { render() { return &lt;ValidationSample /&gt;; }} 🔸 DOM을 꼭 사용해야 하는 상황 state만으로 해결할 수 없는 기능이 있다 특정 input에 포커스 주기 스크롤 박스 조작하기 Canvas 요소에 그림 그리기 등 ✅ ref 사용 ref 사용하는 방법 2가지 🔸 1. 콜백 함수를 통한 ref 설정 ref를 달고자 하는 요소에 ref라는 콜백 함수를 props로 전달 이 콜백 함수는 ref 값을 파라미터로 전달받는다 함수 내부에서 파라미터로 받은 ref를 컴포넌트의 멤버 변수로 설정 12345&lt;input ref={(ref) =&gt; { this.input = ref; }}/&gt; this.input은 input 요소의 DOM을 가리킨다. ref의 이름은 원하는 것으로 자유롭게 지정 🔸 2. createRef를 통한 ref 설정 리액트에 내장된 createRef 함수 사용 createRef 설정한 뒤 나중에 ref를 설정해 준 DOM에 접근하려면 → this.input.current 를 조회 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class ValidationSample extends Component { input = React.createRef(); state = { password: &quot;&quot;, clicked: false, validated: false, }; handleChange = (e) =&gt; { this.setState({ password: e.target.value, }); }; handleClick = () =&gt; { this.setState({ clicked: true, validated: this.state.password === &quot;0000&quot;, }); this.handleFocus(); // 콜백 this.input.focus(); }; handleFocus = () =&gt; { this.input.current.focus(); }; render() { return ( &lt;div&gt; &lt;input ref={this.input} // 콜백 ref={(ref) =&gt; (this.input = ref)} type=&quot;password&quot; value={this.state.password} onChange={this.handleChange} className={ this.state.clicked ? this.state.validated ? &quot;success&quot; : &quot;failure&quot; : &quot;&quot; } &gt;&lt;/input&gt; &lt;button onClick={this.handleClick}&gt;검증&lt;/button&gt; &lt;/div&gt; ); }} ✅ 컴포넌트에 ref 달기 컴포넌트 내부에 있는 DOM을 컴포넌트 외부에서 사용할 때 쓴다 1&lt;MyComponent ref={(ref) =&gt; {this.myComponent=ref}} 이렇게 하면 MyComponent 내부의 메서드 및 멤버 변수에도 접근 가능 즉 내부의 ref에도 접근 가능 스크롤 박스 컴포넌트 만들고 스크롤바를 아래로 내리는 작업을 부모 컴포넌트에서 실행 123456789101112131415161718192021222324252627class ScrollBox extends Component { render() { const style = { border: &quot;1px solid black&quot;, height: &quot;300px&quot;, weight: &quot;300px&quot;, overflow: &quot;auto&quot;, position: &quot;relative&quot;, }; const innerStyle = { width: &quot;100%&quot;, height: &quot;650px&quot;, background: &quot;linear-gradient(white, black)&quot;, }; return ( &lt;div style={style} ref={(ref) =&gt; { this.box = ref; }} &gt; &lt;div style={innerStyle}&gt;&lt;/div&gt; &lt;/div&gt; ); }} 123456789class App extends Component { render() { return ( &lt;div&gt; &lt;ScrollBox /&gt; &lt;/div&gt; ); }} 여기서 컴포넌트 메서드 생성 후 → 컴포넌트에 ref 달고 내부 메서드 사용 12345678class ScrollBox extends Component { scrollToBottom = () =&gt; { const { scrollHeight, clientHeight } = this.box; this.box.scrollTop = scrollHeight - clientHeight; }; render() { ... } 1234567891011121314151617181920class App extends Component { render() { return ( &lt;div&gt; &lt;ScrollBox ref={(ref) =&gt; { this.scrollBox = ref; }} /&gt; &lt;button onClick={() =&gt; { this.scrollBox.scrollToBottom(); }} &gt; 맨 뒤에 &lt;/button&gt; &lt;/div&gt; ); }} 🔸 주의 서로 다른 컴포넌트끼리 데이터를 교류할 때 ref 를 사용한다면 이는 잘못 사용!! 유지보수가 불가능에 가깝게 구조가 꼬여 버린다 컴포넌트끼리 데이터를 교류할 때는 언제나 데이터를 부모 ↔ 자식 흐름으로 교류해야 한다","link":"/2022/02/19/react/ref-DOM-%EC%9D%B4%EB%A6%84%EB%8B%AC%EA%B8%B0/"},{"title":"component와 props를 알아가보자","text":"📌 Component와 PropsComponents와 Props - React 컴포넌트를 통해 UI를 재사용 가능한 개별적인 여러 조각으로 나누고, 각 조각을 개별적으로 살펴볼 수 있다. 개념적으로 컴포넌트는 JavaScript 함수와 유사. “props”라고 하는 임의의 입력을 받은 후, 화면에 어떻게 표시되는지를 기술하는 React 엘리먼트를 반환합니다. ✅함수 컴포넌트와 클래스 컴포넌트123456789# 컴포넌트를 선언하는 방식 두가지1. 함수 컴포넌트2. 클래스형 컴포넌트# 차이점- 클래스형 컴포넌트 -&gt; state 기능 및 라이프 사이클 기능을 사용가능- 임의 메서드를 정의할 수 있다. 🔸 함수형 컴포넌트 컴포넌트를 정의하는 가장 간단한 방법 → JavaScript 함수를 작성 123function Welcome(props) { return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;} 단점 → state와 라이프사이클 API의 사용 불가 → 해결점 → Hooks 기능 도입 🔸 클래스형 컴포넌트 App.js 12345678import { Component } from &quot;react&quot;;class App extends Component { render() { const name = &quot;React&quot;; return &lt;div className=&quot;react&quot;&gt;{name}&lt;/div&gt;; }} render 함수가 꼭 있어야 함 그 안에서 보여 주어야 할 JSX를 반환해야 한다 ✅컴포넌트 렌더링 React 엘리먼트는 사용자 정의 컴포넌트로도 나타낼수 있다. 1const element = &lt;Welcome name=&quot;Sara&quot; /&gt;; Props : React가 사용자 정의 컴포넌트로 작성한 엘리먼트를 발견하면 → JSX 어트리뷰트와 자식을 해당 컴포넌트에 단일 객체로 전달합니다. 이 객체를 props 1234567891011121314function Welcome(props) { return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;}const element = &lt;Welcome name=&quot;Sara&quot; /&gt;;ReactDOM.render( element, document.getElementById('root'));1. &lt;Welcome name=&quot;Sara&quot; /&gt; 엘리먼트로 ReactDOM.render()를 호출합니다.2. React는 {name: 'Sara'}를 props로 하여 Welcome 컴포넌트를 호출합니다.3. Welcome 컴포넌트는 결과적으로 &lt;h1&gt;Hello, Sara&lt;/h1&gt; 엘리먼트를 반환합니다.4. React DOM은 &lt;h1&gt;Hello, Sara&lt;/h1&gt; 엘리먼트와 일치하도록 DOM을 효율적으로 업데이트합니다. ✅ 컴포넌트 합성 컴포넌트는 자신의 출력에 다른 컴포넌트를 참조할 수 있습니다. 123456789101112131415function Welcome(props) { return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;}function App() { return ( &lt;div&gt; &lt;Welcome name=&quot;Sara&quot; /&gt; &lt;Welcome name=&quot;Cahal&quot; /&gt; &lt;Welcome name=&quot;Edite&quot; /&gt; &lt;/div&gt; );}ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;)); ✅첫 컴포넌트 생성 src/[new file].js 12345const MyComponent = () =&gt; { return &lt;div&gt;First new Component&lt;/div&gt;;};export default MyComponent; 일반 함수 vs 화살표 함수 차이 == this 값이 다르다 일반 함수 → 자신이 종속된 객체를 this로 가리킨다 화살표 함수 → 자신이 종속된 인스턴스(new)를 가리킨다 123const App = () =&gt; { return &lt;MyComponent /&gt;;}; ✅Props properties 줄인 표현, 컴포넌트 속성을 설정할 때 사용하는 요소 props 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트(App.js)에서 설정할 수 있다 123456// MyComponent.jsconst MyComponent = (props) =&gt; { return &lt;div&gt;My name {props.name}&lt;/div&gt;;};export default MyComponent; 12345678// App.jsimport MyComponent from &quot;./MyComponent&quot;;const App = () =&gt; { return &lt;MyComponent name=&quot;⚛️React&quot; /&gt;;};export default App; 🔸Props 기본값 설정 : defaultProps123456789101112const MyComponent = (props) =&gt; { return &lt;div&gt;My name {props.name} 입니다&lt;/div&gt;;};MyComponent.defaultProps = { name: &quot;기본이름&quot;,};// App.jsconst App = () =&gt; { return &lt;MyComponent /&gt;;}; 🔸태그 사이의 내용을 보여주는 Children 컴포넌트 태그 사이의 내용을 보여주는 props children 123const App = () =&gt; { return &lt;MyComponent&gt;react&lt;/MyComponent&gt;;}; 1234567891011const MyComponent = (props) =&gt; { return ( &lt;div&gt; My name {props.name} 입니다 Children value {props.children} &lt;/div&gt; );};MyComponent.defaultProps = { name: &quot;기본이름&quot;,}; 🔸 비구조화 할당 문법 props 키워드를 앞에다 붙이는데 이를 편하기 위해 → 비구조화 할당 문법 사용 123456789const MyComponent = (props) =&gt; { const { name, children } = props; return ( &lt;div&gt; My name {name} 입니다 &lt;br /&gt; Children value {children} &lt;/div&gt; );}; 비구조화 할당 문법 = 구조 분해 문법 함수의 파라미터 부분에도 사용 가능 12const MyComponent = ({ name, children }) =&gt; { return ( ... ) 🔸 클래스형 컴포넌트 Props props 사용 시 → render 함수에서 this.props 1234567891011121314151617181920class MyComponent extends Component { static defaultProps = { name: &quot;기본 이름&quot;, }; static propTypes = { name: PropTypes.string, favoriteNumber: PropTypes.number.isRequired, }; render() { const { name, favoriteNumber, children } = this.props; return ( &lt;div&gt; My name {name} 입니다 &lt;br /&gt; Children value {children} &lt;br /&gt; 좋아하는 숫자 {favoriteNumber} &lt;/div&gt; ); }}","link":"/2022/01/21/react/component-and-props/"},{"title":"이벤트 핸들링","text":"📌이벤트 핸들링이벤트 처리하기 - React 📌이벤트 핸들링 🔸 이벤트 주의사항 ✅ 이벤트 핸들링 익히기 🔹onChange 이벤트 핸들링 🔸 임의 메서드 만들기 🔸 Property Initializer Syntax 🔸 input 여러 개 다루기 🔹 onKeyPress 이벤트 핸들링 ✅ 함수 컴포넌트 이벤트 핸들링 이벤트 : 사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것 🔸 이벤트 주의사항123456789101112131. 이벤트 이름은 카멜 표기법- onclick → onClick2. 이벤트에 실행할 js 코드를 전달하는 것이 아니라 함수 형태의 값 전달- 리액트에서는 함수 형태의 객체르 전달한다3. DOM 요소에만 이벤트를 설정할 수 있다- div, button, input, form, span 등 DOM 요소에는 이벤트 설정 가능- 우리가 직접 만든 컴포넌트에는 이벤트를 설정할 수 없다- 하지만 전달받은 props를 컴포넌트 내부의 DOM 이벤트로 설정 가능 ➡️ 이벤트 종류 합성 이벤트(SyntheticEvent) - React 1234567# formonChange() =&gt; e.target.value# buttononClick() ✅ 이벤트 핸들링 익히기 src/EventPractice.js 컴포넌트 생성 App.js에서 렌더링 이벤트 핸들링 🔹onChange 이벤트 핸들링 form 요소의 값이 바뀔 때 1234567891011121314151617class EventPractice extends Component { render() { return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;아무거나 입력&quot; onChange={(e) =&gt; { console.log(e.target.value); }} &gt;&lt;/input&gt; &lt;/div&gt; ); }} ➡️ state에 input값 담기 1234567891011121314151617181920212223class EventPractice extends Component { state = { message: &quot;&quot;, }; render() { return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;아무거나 입력&quot; value={this.state.message} onChange={(e) =&gt; { this.setState({ message: e.target.value, }); }} &gt;&lt;/input&gt; &lt;/div&gt; ); }} ➡️ 버튼 누를 때 comment 값 공백 설정 입력한 값이 state에 들어갔는지, 인풋에서 그 값을 제대로 반영하는지 검증 1234567위에 &lt;input ...&gt;&lt;button onClick={() =&gt; { alert(this.state.message); this.setState({ message: &quot;&quot; }); }}&gt; Check&lt;/button&gt; 🔸 임의 메서드 만들기 이벤트에 실행할 js 코드를 전달하는 것이 아니라, 함수 형태의 값을 전달 함수를 미리 준비하여 전달하는 방법 → 가독성이 좋아짐 1234# 클래스특정 객체를 생성하기 위해 변수와 메소드를 정의하는 일종의 틀로,객체를 정의하기 위한 상태(멤버 변수)와 메서드(함수)로 구성된다. 123456789101112131415161718192021222324252627282930313233343536373839class EventPractice extends Component { state = { message: &quot;&quot;, }; constructor(props) { super(props); this.handleChange = this.handleChange.bind(this); this.handleClick = this.handleClick.bind(this); } handleChange(e) { this.setState({ message: e.target.value, }); } handleClick() { this.setState({ message: &quot;&quot;, }); } render() { return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;아무거나 입력&quot; value={this.state.message} onChange={this.handleChange} &gt;&lt;/input&gt; &lt;button onClick={this.handleClick}&gt;Check&lt;/button&gt; &lt;/div&gt; ); }} 함수가 호출될 때 this는 호출부에 따라 결정 → 클래스의 임의 메서드가 HTML 요소 이벤트로 등록되면 메서드와 this의 관계가 끊어짐 이 때문에 임의 메서드가 이벤트로 등록되어도 this를 컴포넌트 자신으로 제대로 가리키기 위해서 → 메서드를 this와 바인딩하는 작업 필요 🔸 Property Initializer Syntax 메서드 바인딩은 생성자 메서드에서 하는 것이 정석 but 새 메서드를 만들 때마다 constructor를 수정하기가 불편하다 화살표 함수로 이를 대처한다 12345678910111213141516171819202122232425262728293031323334class EventPractice extends Component { state = { message: &quot;&quot;, }; handleChange = (e) =&gt; { this.setState({ message: e.target.value, }); }; handleClick = () =&gt; { alert(this.state.message); this.setState({ message: &quot;&quot;, }); }; render() { return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;아무거나 입력해 보세요&quot; value={this.state.message} onChange={this.handleChange} &gt;&lt;/input&gt; &lt;button onClick={this.handleClick}&gt;Check&lt;/button&gt; &lt;/div&gt; ); }} 🔸 input 여러 개 다루기 event 객체를 활용하는 것이 핵심 → e.target.name 값을 사용하면 된다 123456789101112131415161718192021222324252627282930313233343536373839404142class EventPractice extends Component { state = { username: &quot;&quot;, message: &quot;&quot;, }; handleChange = (e) =&gt; { this.setState({ [e.target.name]: e.target.value, }); }; handleClick = () =&gt; { alert(this.state.username + &quot;: &quot; + this.state.message); this.setState({ message: &quot;&quot;, }); }; render() { return ( &lt;div&gt; &lt;h1&gt;이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;사용자명&quot; value={this.state.username} onChange={this.handleChange} &gt;&lt;/input&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;아무거나 입력해 보세요&quot; value={this.state.message} onChange={this.handleChange} &gt;&lt;/input&gt; &lt;button onClick={this.handleClick}&gt;Check&lt;/button&gt; &lt;/div&gt; ); }} 이 코드가 핵심 12345handleChange = (e) =&gt; { this.setState({ [e.target.name]: e.target.value, });}; 객체 안에서 key를 [ ]로 감싸면 그 안에 넣은 레퍼런스가 가리키는 실제 값이 key 값으로 사용 예시 123456789const name = 'woongKey'const object = { [name]: 'value'}// 결과{ 'woongKey': 'value'} 🔹 onKeyPress 이벤트 핸들링 키를 눌렀을 때 발생하는 KeyPress 이벤트 처리방법 12345678910111213141516handleKeyPress = (e) =&gt; { if (e.key === &quot;Enter&quot;) { this.handleClick(); } };render() { return ( &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;아무거나 입력해 보세요&quot; value={this.state.message} onChange={this.handleChange} onKeyPress={this.handleKeyPress} &gt;&lt;/input&gt; ✅ 함수 컴포넌트 이벤트 핸들링12345678910111213141516171819202122232425262728293031323334353637const EventPracticeFuc = () =&gt; { const [username, setUsername] = useState(&quot;&quot;); const [message, setMessage] = useState(&quot;&quot;); const handleUserChange = (e) =&gt; setUsername(e.target.value); const handleMessageChange = (e) =&gt; setMessage(e.target.value); const handleClick = () =&gt; { alert(username + &quot;: &quot; + message); setUsername(&quot;&quot;); setMessage(&quot;&quot;); }; const handleKeyPress = (e) =&gt; { if (e.key === &quot;Enter&quot;) { handleClick(); } }; return ( &lt;div&gt; &lt;h1&gt;함수 컴포넌트 이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;사용자이름&quot; value={username} onChange={handleUserChange} &gt;&lt;/input&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;내용&quot; value={message} onChange={handleMessageChange} onKeyPress={handleKeyPress} &gt;&lt;/input&gt; &lt;button onClick={handleClick}&gt;Check&lt;/button&gt; &lt;/div&gt; );}; 이를 e.target.name 활용해보기 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const EventPracticeFuc = () =&gt; { const [form, setForm] = useState({ username: &quot;&quot;, message: &quot;&quot;, }); const { username, message } = form; const onChange = (e) =&gt; { const nextForm = { ...form, [e.target.name]: e.target.value, }; setForm(nextForm); }; const onClick = () =&gt; { alert(username + &quot;: &quot; + message); setForm({ username: &quot;&quot;, message: &quot;&quot;, }); }; const onKeyPress = (e) =&gt; { if (e.key === &quot;Enter&quot;) { onClick(); } }; return ( &lt;div&gt; &lt;h1&gt;함수 컴포넌트 이벤트 연습&lt;/h1&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;사용자이름&quot; value={username} onChange={onChange} &gt;&lt;/input&gt; &lt;input type=&quot;text&quot; name=&quot;message&quot; placeholder=&quot;내용&quot; value={message} onChange={onChange} onKeyPress={onKeyPress} &gt;&lt;/input&gt; &lt;button onClick={onClick}&gt;Check&lt;/button&gt; &lt;/div&gt; );};","link":"/2022/02/18/react/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%A7%81/"},{"title":"컴포넌트 라이프 사이클","text":"📌 컴포넌트 라이프사이클 메서드State and Lifecycle - React 📌 컴포넌트 라이프사이클 메서드 ✅ 라이프사이클 메서드 이해 🔸 render() 함수 🔸 getDerivedStateFromProps 🔸 componentDidMount 🔸 shouldComponentUpdate 🔸 getSnapshotBeforeUpdate 🔸 componentDidUpdate 🔸 componentWillUnmount 🔸componentDidCatch ✅ 라이프사이클 메서드 사용 🔸 정리 리액트 프로젝트를 진행하다 보면 가끔 컴포넌트를 처음으로 렌더링할 때 어떤 작업을 처리해야하거나 컴포넌트를 업데이트하기 전후로 어떤 작업을 처리해야 할 수도 있고, 또 불필요한 업데이트를 방지해야 할 수도 있다 라이프사이클 메서드는 클래스 컴포넌트에만 사용 가능 함수 컴포넌트는 Hooks 기능을 사용하여 작업 처리 ✅ 라이프사이클 메서드 이해 will 접두사가 붙은 메서드는 어떤 작업을 작동하기 전에 실행되는 메서드 Did 접두사가 붙은 메서드는 어떤 작업을 작동한 후에 실행되는 메서드 12345678910# 마운트(mount): DOM이 생성되고 웹 브라우저상에 나타나는 것마운트할 때 호출하는 메서드- constructor : 컴포넌트를 새로 만들 때마다 호출되는 클래스 생성자 메서드- getDerivedStateFromProps : props에 있는 값을 state에 넣을 때 사용하는 메서드- render : 우리가 준비한 UI를 렌더링하는 메서드- componentDidMount : 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드 123456789101112131415161718# 업데이트컴포넌트는 다음과 같은 네 가지 경우에 업데이트 한다1. props가 바뀔 때2. state가 바뀔 때3. 부모 컴포넌트가 리렌더링될 때4. this.forceUpdate로 강제로 렌더링을 트리거할 때업데이트할 때 호출하는 메서드- getDerivedStateFromProps : 마운트 과정에서도 호출되며, props의 변화에 따라 state 값에도 변화를 주고 싶을 때 사용- shouldComponentUpdate : 컴포넌트가 리렌더링을 해야 할지 말아야 할지 결정하는 메서드 true 반환 -&gt; 다음 라이프사이클 메서드 계속 실행, false 반환 -&gt; 작업 중지- render : 컴포넌트 리렌더링- getSnapshotBeforeUpdate : 컴포넌트 변화를 DOM에 반영하기 바로 직전에 호출- componentDidUpdate : 컴포넌트의 업데이트 작업이 끝난 후 호출하는 메서드 1234567# 언마운트컴포넌트를 DOM에서 제거하는 것은 언마운트언마운트할 때 호출하는 메서드- componentWillUnmount : 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출하는 메서드 🔸 render() 함수 이 메서드 안에서 this.props 와 this.state에 접근할 수 있으며, 리액트 요소를 반환한다 요소는 div 같은 태그나 따로 선언한 컴포넌트가 될 수도 있다 이 메서드 안에서는 이벤트 설정이 아닌 곳에서 setState를 사용하면 안됨, 브라우저 DOM에 접근해도 안됨 DOM에 정보를 가져오거나 state에 변화를 줄 때는 componentDidMount에 처리 1render() { ... } 🔸 getDerivedStateFromProps props로 받아 온 값을 state에 동기화시키는 용도로 사용 컴포넌트가 마운트될 때와 업데이트될 때 호출된다 123456static getDerivedStateFromProps(nextProps, prevState) { if(nextProps.value !== prevState.value) { return { value: nextProps.value } } return null // state를 변경할 필요가 없다면} 🔸 componentDidMount 컴포넌트를 만들고, 첫 렌더링을 다 마친 후 실행 이 안에서 다른 JS 라이브러리 또는 프레임워크의 함수를 호출 이벤트 등록, setTimeout, setInterval, 네트워크 요청 같은 비동기 작업을 처리 1componentDidMount() { ... } 🔸 shouldComponentUpdate props 또는 state를 변경했을 때, 리렌더링을 시작할지 여부를 지정하는 메서드 이 메서드는 반드시 true 또는 false을 반환해야 한다 (default = true) 이 메서드 안에서 현재 props와 state는 this.props와 this.state로 접근하고, 새로 설정될 props, state는 nextProps, nextState로 접근 프로젝트 성능을 최적화할 때, 상황에 맞는 알고리즘 리렌더링을 방지할 떄 → false 1shouldComponentUpdate(nextProps, nextState) { ... } 🔸 getSnapshotBeforeUpdate 이 메서드는 render에서 만들어진 결과물이 브라우저에 실제로 반영되기 직전에 호출 이 메서드에서 반환하는 값은 componentDidUpdate에서 세 번째 파라미터인 snapshot 값으로 전달 주로 업데이트하기 직전의 값을 참고할 일이 있을 때 1getSnapSshotBeforeUpdate(prevProps, prevState) { .... } 🔸 componentDidUpdate 리렌더링을 완료한 후 실행한다 업데이트가 끝난 직후이므로, DOM 관련 처리를 해도 무방 파라미터를 사용하여 컴포넌트가 이전에 가졌던 데이터에 접근 가능 1componentDidUpdate(prevProps, prevState, snapshot) { ... } 🔸 componentWillUnmount 컴포넌트를 DOM에서 제거할 때 실행한다 componentDidMount 에서 등록한 이벤트, 타이머, 직접 생성한 DOM이 있다면 여기서 제거 작업을 해야 한다 1componentWillUnmount() { ... } 🔸componentDidCatch 컴포넌트 렌더링 도중에 에러가 발생했을 때 애플리케이션이 먹통이 되지 않고 오류 UI를 보여줌 123456componentDidCatch(error, info) { this.setState({ error: true }); clg({error, info})} ✅ 라이프사이클 메서드 사용12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import { Component } from &quot;react&quot;;class LifeCycleSample extends Component { state = { number: 0, color: null, }; myRef = null; constructor(props) { super(props); console.log(&quot;constructor&quot;); } static getDerivedStateFromProps(nextProps, prevState) { console.log(&quot;getDerivedStateFromProps&quot;); if (nextProps.color !== prevState.color) { return { color: nextProps.color }; } return null; } componentDidMount() { console.log(&quot;componentDidMount&quot;); } shouldComponentUpdate(nextProps, nextState) { console.log(&quot;shouldComponentUpdate&quot;, nextProps, nextState); return nextProps.number % 10 !== 4; } componentWillUnmount() { console.log(&quot;componentWillUnmount&quot;); } handleClick = () =&gt; { this.setState({ number: this.state.number + 1, }); }; getSnapshotBeforeUpdate(prevProps, prevState) { console.log(&quot;getSnapshotBeforeUpdate&quot;); if (prevProps.color !== this.props.color) { return this.myRef.style.color; } return null; } componentDidUpdate(prevProps, prevState, snapshot) { console.log(&quot;componentDidUpdate&quot;, prevProps, prevState); if (snapshot) { console.log(&quot;업데이트되기 전에 색상: &quot;, snapshot); } } render() { console.log(&quot;render&quot;); const style = { color: this.props.color, }; return ( &lt;div&gt; &lt;h1 style={style} ref={(ref) =&gt; (this.myRef = ref)}&gt; {this.state.number} &lt;/h1&gt; &lt;p&gt;color: {this.state.color}&lt;/p&gt; &lt;button onClick={this.handleClick}&gt;더하기&lt;/button&gt; &lt;/div&gt; ); }}export default LifeCycleSample; 123456789101112131415161718192021222324function getRandomColor() { return &quot;#&quot; + Math.floor(Math.random() * 16777215).toString(16);}class App extends Component { state = { color: &quot;#000000&quot;, }; handleClick = () =&gt; { this.setState({ color: getRandomColor(), }); }; render() { return ( &lt;div&gt; &lt;button onClick={this.handleClick}&gt;랜덤 색상&lt;/button&gt; &lt;LifeCycleSample color={this.state.color} /&gt;; &lt;/div&gt; ); }} 🔸 정리 출처 : https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/","link":"/2022/02/21/react/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84-%EC%82%AC%EC%9D%B4%ED%81%B4/"},{"title":"컴포넌트 반복","text":"📌 컴포넌트 반복리스트와 Key - React 이번에는 리액트 프로젝트에서 반복적인 내용을 효율적으로 보여 주고 관리하는 방법을 알아본다 📌 컴포넌트 반복 ✅ JS 배열의 map() 함수 🔸 문법 🔸 데이터 배열을 컴포넌트 배열로 변환 ✅ key ✅ 응용 🔸 초기상태 🔸 데이터 추가 기능 🔸 데이터 제거 기능 123456789101112# 정리배열의 내장 함수들1. map = 새로운 배열로 만드는 것 - map(새로운 배열 정의 (callback)) - key가 존재해야 한다 (DOM 요소 안에 또는 컴포넌트 안에)2. concat = 기존의 배열과 새로운 배열 합치기3. filter = 분류해서 남기는 것(조건), 데이터 제거 일종 ✅ JS 배열의 map() 함수 JS 배열 객체의 내장 함수 map 함수를 사용해 → 반복되는 컴포넌트를 렌더링 할수 있다 map함수 → 파라미터로 전달된 함수를 사용해서 배열 내 각 요소를 원하는 규칙에 따라 변환한 후 → 그 결과로 새로운 배열을 생성 🔸 문법1arr.map(callback, [thisArg]); callback : 새로운 배열의 요소를 생성하는 함수 currentValue : 현재 처리하고 있는 요소 index : 현재 처리하고 있는 요소의 index값 array : 현재 처리하고 있는 원본 배열 thisArg : callback 함수 내부에서 사용할 this 레퍼런스 1234const numbers = [1, 2, 3, 4, 5];const processed = numbers.map(function (num) { return num * num;}); 🔸 데이터 배열을 컴포넌트 배열로 변환12345const IterationSample = () =&gt; { const names = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]; const nameList = names.map((name) =&gt; &lt;li&gt;{name}&lt;/li&gt;); return &lt;ul&gt;{nameList}&lt;/ul&gt;;}; 콘솔창을 열어보면 경고창 → key 가 없다고 뜬다 ✅ key 리액트에서 key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이 있었는지 알아내려고 사용 key가 없을 때는 Virtual DOM을 비교하는 과정에서 리스트를 순차적으로 비교하면서 변화 감지 하지만 key가 있다면 어떤 변화가 일어났는지 더욱 빠르게 알 수 있다 key 설정 key 값 설정할 때는 map 함수의 인자로 전달되는 함수 내부에서 컴포넌트 props를 설정하듯이 설정하면 된다 key 값은 언제나 유일해야 한다 12345const IterationSample = () =&gt; { const names = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]; const nameList = names.map((name, index) =&gt; &lt;li key={index}&gt;{name}&lt;/li&gt;); return &lt;ul&gt;{nameList}&lt;/ul&gt;;}; 고유한 값이 없을 때 → 위 처럼 index 값을 key로 사용 ✅ 응용 어떻게 고윳값을 만들 수 있을 지 알아보자 실습 흐름 초기 상태 설정 데이터 추가 기능 구현 데이터 제거 기능 구현 🔸 초기상태1234567891011121314const IterationSample = () =&gt; { const [names, setNames] = useState([ { id: 1, text: &quot;눈사람&quot; }, { id: 2, text: &quot;얼음&quot; }, { id: 3, text: &quot;눈&quot; }, { id: 4, text: &quot;바람&quot; }, ]); const [inputText, setInputText] = useState(&quot;&quot;); const [nextId, setNextId] = useState(5); const nameList = names.map((name) =&gt; &lt;li key={name.id}&gt;{name.text}&lt;/li&gt;); return &lt;ul&gt;{nameList}&lt;/ul&gt;;}; 상태 설정 데이터 배열 텍스트 입력할 수 있는 input의 상태 데이터 배열에서 새로운 항목을 추가할 때 사용할 고유 id를 위한 상태 🔸 데이터 추가 기능 concat() 메서드는 인자로 주어진 배열이나 값들을 기존 배열에 합쳐서 새 배열을 반환 1234567891011121314151617181920212223242526272829303132333435import { useState } from &quot;react&quot;;const IterationSample = () =&gt; { const [names, setNames] = useState([ { id: 1, text: &quot;눈사람&quot; }, { id: 2, text: &quot;얼음&quot; }, { id: 3, text: &quot;눈&quot; }, { id: 4, text: &quot;바람&quot; }, ]); const [inputText, setInputText] = useState(&quot;&quot;); const [nextId, setNextId] = useState(5); const onChange = (e) =&gt; setInputText(e.target.value); const onClick = () =&gt; { const nextNames = names.concat({ id: nextId, text: inputText, }); setNextId(nextId + 1); setNames(nextNames); setInputText(&quot;&quot;); }; const nameList = names.map((name) =&gt; &lt;li key={name.id}&gt;{name.text}&lt;/li&gt;); return ( &lt;div&gt; &lt;input value={inputText} onChange={onChange}&gt;&lt;/input&gt; &lt;button onClick={onClick}&gt;Add&lt;/button&gt; &lt;ul&gt;{nameList}&lt;/ul&gt; &lt;/div&gt; );};export default IterationSample; 배열에 새 항목 추가할 때 → push 함수는 기존 배열 자체를 변경해줌 왜 push 안썻는가? → 리액트에서 상태를 업데이트할 때는 기존 상태를 그대로 두면서 새로운 값을 상태로 설정 해야 하기 때문 → 이를 **불변성 유지** → 나중에 최적화 가능 🔸 데이터 제거 기능 이번에도 마찬가지로 불변성을 유지하면서 업데이트해 주어야 한다 불변성을 유지하면서 배열의 특정 항목을 지울 때는 배열의 내장 함수 filter을 사용 **filter 함수**를 사용하면 배열에서 특정 조건을 만족하는 원소들만 쉽게 분류 할 수 있다 filter 함수 인자에 분류하고 싶은 조건을 반환하는 함수를 넣어주면 된다 123const numbers = [1, 2, 3, 4, 5, 6];const filterNum = numbers.filter((number) =&gt; number &gt; 3);const filterNum2 = numbers.filter((number) =&gt; number !== 3); // 1, 2, 4, 5, 6 12345678910111213141516171819202122232425262728293031323334353637383940414243import { useState } from &quot;react&quot;;const IterationSample = () =&gt; { const [names, setNames] = useState([ { id: 1, text: &quot;눈사람&quot; }, { id: 2, text: &quot;얼음&quot; }, { id: 3, text: &quot;눈&quot; }, { id: 4, text: &quot;바람&quot; }, ]); const [inputText, setInputText] = useState(&quot;&quot;); const [nextId, setNextId] = useState(5); const onChange = (e) =&gt; setInputText(e.target.value); const onClick = () =&gt; { const nextNames = names.concat({ id: nextId, text: inputText, }); setNextId(nextId + 1); setNames(nextNames); setInputText(&quot;&quot;); }; const onRemove = (id) =&gt; { const nextNames = names.filter((name) =&gt; name.id !== id); setNames(nextNames); }; const nameList = names.map((name) =&gt; ( &lt;li key={name.id} onDoubleClick={() =&gt; onRemove(name.id)}&gt; {name.text} &lt;/li&gt; )); return ( &lt;div&gt; &lt;input value={inputText} onChange={onChange}&gt;&lt;/input&gt; &lt;button onClick={onClick}&gt;Add&lt;/button&gt; &lt;ul&gt;{nameList}&lt;/ul&gt; &lt;/div&gt; );};export default IterationSample;","link":"/2022/02/20/react/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B0%98%EB%B3%B5/"},{"title":"컴포넌트-스타일링","text":"📌 컴포넌트 스타일링 📌 컴포넌트 스타일링 ✅ CSS ✅ Sass 🔸 utils 함수 분리하기 🔸 sass-loader 설정 커스터마이징 🔸 node_modules에서 라이브러리 불러오기 ✅ CSS Module 🔸 classnames 🔸 Sass와 함께 사용하기 ✅ styled-components 🔸 Tagged 템플릿 리터럴 🔸 스타일에서 props 조회하기 🔸 props에 따른 조건부 스타일링 🔸 반응형 디자인 CSS Sass : css 전처리기 중 하나로 확장된 css문법을 사용 CSS Module : css 클래스가 다른 css 클래스의 이름과 충돌하지 않도록 파일마다 고유한 이름을 자동으로 생성해 주는 옵션 styled-componenents : 스타일을 JS 파일에 내장시키는 방식으로 스타일을 작성함과 동시에 해당 스타일이 적용된 컴포넌트를 만들 수 있게 해줌 ✅ CSS 이름-클래스 형태 (App-header) 클래스 이름에 컴포넌트 이름을 포함시킴으로써 다른 컴포넌트에서 실수로 중복되는 클래스를 만들어 사용하는 것을 방지 한다 → BEM 네이밍 ✅ Sass Sass : 문법적으로 매우 멋진 스타일시트 CSS 전처리기로 복잡한 작업을 쉽게 한다 스타일 코드의 재활용성 높여 줌 코드의 가독성을 높여서 유지 보수를 쉽게 한다 Sass에서는 두 가지 확장자 .scss 와 .sass를 지원한다 12yarn installyarn add sass 🔸 utils 함수 분리하기 여러 파일에서 사용되는 Sass 변수 및 믹스인은 다른 파일로 따로 분리하여 쉽게 불러올 수 있다 12345678910// 변수 사용하기$red: red;$orange: orange;// 믹스인 만들기 (재사용되는 스타일 블록을 함수처럼 사용할 수 있음)@mixin square($size) { $calculated: 32px * $size; width: $calculated; height: $calculated;} 🔸 sass-loader 설정 커스터마이징 create-react-app에서는 기본적 git 설정 돼있다 → yarn eject는 git 커밋부터 $ yarn eject → $ react-scripts eject → config 디렉터리 생성됨 webpack.config.js 열어서 → sassRegex ‘sass-loader’ 지우고 12345678}).concat({loader: require.resolve(&quot;sass-loader&quot;),options: { sassOptions: { includePaths: [path.appSrc + &quot;/styles&quot;], }}}), sideEffects: true, 🔸 node_modules에서 라이브러리 불러오기 Sass 장점 → 라이브러리를 쉽게 불러와서 사용할 수 있다 @import ‘../../../../node_modules/library/styles; → 너무 길다 @import ‘~/library/styles’; → ~ 물결 사용 물결 문자를 사용하면 자동으로 node_modules에서 라이브러리 디렉터리를 탐지하여 스타일 불러온다 Sass 라이브러리 유용한 두 가지 설치해 사용해 보자 반응형 디자인 쉽게 해주는 include-media 색상 팔레트 open-color 1yarn add open-color include-media 12@import &quot;~include-media/dist/include-media&quot;;@import &quot;~open-color/open-color&quot;; 123456.SassComponent { display: flex; background: $oc-gray-2; @include media(&quot;&lt;768px&quot;) { background: $oc-gray-9; } ✅ CSS Module CSS를 불러와서 사용할 때 클래스 이름을 고유한 값 즉 [파일 이름]_[클래스 이름]__[해시값] 형태로 자동으로 만들어서 컴포넌트 스타일 클래스 이름이 중첩되는 현상을 방지해 주는 기술 레거시 프로젝트에 리액트를 도입할 때 기존 프로젝트에 있는 css클래스와 이름이 중복되어도 새로운 이름이 입혀지기 때문에 스타일이 꼬이지 않게 해준다. CSSModule.module.css 1234567891011.wrapper { background: black; padding: 1rem; color: white; font-size: 2rem;}:global .something { font-weight: 800; color: aqua;} CSSModule.js 1234567891011import styles from &quot;./CSSModule.module.css&quot;;const CSSModule = () =&gt; { return ( &lt;div className={styles.wrapper}&gt; Hello World i'm &lt;span className=&quot;something&quot;&gt;CSS Module!!&lt;/span&gt; &lt;/div&gt; );};export default CSSModule; CSS Module이 적용된 스타일 파일을 불러오면 → 객체를 하나 전달 받는데 CSS Module에서 사용한 클래스 이름과 해당 이름을 고유화한 값이 키-값 형태 이 고유한 클래스 이름을 사용하려면 클래스를 적용하고 싶은 JSX 엘리먼트에className={styles.[클래스 이름]} 형태로 전달 :global 을 사용하여 전역적으로 선언한 클래스의 경우 평상시 해왔던 것처럼 문자열로 넣는다 :local 은 그 해당 컴포넌트에서만 사용될 수 있는 클래스임을 정의 ➡️ CSS Module을 사용한 클래스 이름을 두 개 이상 적용할 때는?? 1234567891011121314151617.wrapper { background: black; padding: 1rem; color: white; font-size: 2rem;}.inverted { color: black; background: white; border: 1px solid black;}:global .something { font-weight: 800; color: aqua;} 1234567891011import styles from &quot;./CSSModule.module.css&quot;;const CSSModule = () =&gt; { return ( &lt;div className={**`${styles.wrapper} ${styles.inverted}`**}&gt; Hello World i'm &lt;span className=&quot;something&quot;&gt;CSS Module!!&lt;/span&gt; &lt;/div&gt; );};export default CSSModule; 🔸 classnames classnames는 CSS 클래스를 조건부로 설정할 때 매우 유용한 라이브러리 CSS Module을 사용할 때 이 라이브러리를 사용하면 여러 클래스를 적용할 때 편리하다 1$ yarn add classnames 사용법 12345import classNames from &quot;classnames&quot;;classNames(&quot;one&quot;, &quot;two&quot;); // = 'one two'classNames(&quot;one&quot;, { two: true }); // = 'one two'classNames(&quot;one&quot;, [&quot;two&quot;, &quot;three&quot;]); // = 'one two three' 이런 식으로 여러 가지 종류의 파라미터를 조합해 CSS 클래스를 설정할 수 있기 때문에컴포넌트에서 조건부로 클래스를 설정할 때 편리하다 예를 들어 props 값에 따라 다른 스타일을 주기가 쉽다 123const MyComponent = ({ highlighted, theme }) =&gt; { &lt;div className={classNames('MyComponent', { highlighted}, theme)}&gt; Hello&lt;/div&gt;); 위 엘리먼트의 클래스에 highlighted 값이 true이면 → 클래스가 적용되고, false → 적용되지 않음 이 라이브러리를 도움을 받지 않는다면 어떤 형태인가??? 12345const MyComponent = ({ highlighted, theme }) =&gt; { &lt;div className={`MyComponet ${theme} ${highlighted ? 'highlighted' : ''}`}&gt; Hello &lt;/div&gt;); bind 함수 classnames에 내장되어 있는 함수로 클래스를 넣어 줄 때마다 styles.[클래스 이름] 형태일 필요없다 12345678import classNames from 'classnames/bind'import styles from &quot;./CSSModule.module.scss&quot;const cx = classNames.bind(styles)const CSSModule = () =&gt; { return ( &lt;div className={cs('wrapper', 'inverted')}&gt; 🔸 Sass와 함께 사용하기 Sass 또한 → .module.scss 확장자 사용 ✅ styled-components JS 파일 안에 스타일을 선언하는 방식 → ‘CSS-in-JS’ 1yarn add styled-components JS 파일 하나에 스타일까지 작성할 수 있기 때문에 .css .scss 확장자를 따로 안만들어도 된다 사용 → styled 불러오고, styled.태그명 사용 12345import styled from &quot;styled-components&quot;;const Mycomponent = styled.div` font-size: 2rem;`; 하지만 사용해야 할 태그명이 유동적이거나 특정 컴포넌트 자체에 스타일링해 주고 싶다면 다음과 같은 형태 구현 1234567const MyInput = styled(&quot;input&quot;)` background: tomato;`;const StyledLink = styled(Link)` color: violet;`; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import React from &quot;react&quot;;import styled, { css } from &quot;styled-components&quot;;const Box = styled.div` /*props로 넣어 준 값을 직접 전달해 줄 수 있습니다*/ background: ${(props) =&gt; props.color || &quot;blue&quot;}; padding: 1rem; display: flex;`;const Button = styled.button` background: white; color: black; border-radius: 4px; padding: 0.5rem; display: flex; align-items: center; justify-content: center; box-sizing: border-box; font-size: 1rem; font-weight: 600; /* &amp;문자를 사용하여 Sass 처럼 자기 자신 선택 가능 */ &amp;:hover { background: rgba(255, 255, 255, 0.9); } ${(props) =&gt; props.inverted &amp;&amp; css` background: none; border: 2px solid white; color: white; &amp;:hover { background: white; color: black; } `}; &amp; + button { margin-left: 1rem; }`;const StyledComponent = () =&gt; { return ( &lt;Box color=&quot;black&quot;&gt; &lt;Button&gt;안녕하세요&lt;/Button&gt; &lt;Button inverted={true}&gt;테두리만&lt;/Button&gt; &lt;/Box&gt; );};export default StyledComponent; 🔸 Tagged 템플릿 리터럴 백틱 이라는 문법 Tagged 템플릿 리터럴을 사용하면 템플릿 사이사이에 들어가는 JS 객체나 함수의 원본 값을 그대로 추출할 수 있다 🔸 스타일에서 props 조회하기위에 만든 Box 컴포넌트를 살펴보면 123456const Box = styled.div` background: ${(props) =&gt; props.color || &quot;blue&quot;};const StyledComponent = () =&gt; { return ( &lt;Box color=&quot;black&quot;&gt; 이렇게 만든 코드는JSX에서 사용될 때 color 값을 props로 넣어줄 수 있다 🔸 props에 따른 조건부 스타일링 일반 CSS 조건부 스타일링 → className styled-components에서는 조건부 스타일링 → props로 처리할 수 있다 12345${(props) =&gt; props.inverted &amp;&amp; css`&lt;Button inverted={true}&gt;테두리만&lt;/Button&gt; 스타일 코드 여러 줄을 props에 따라 넣어 주어야 할 때는 CSS를 styled-components에서 불러와야 한다 → 왜냐?? → Tagged 템플릿 리터럴을 사용할 수 없기 때문이다 🔸 반응형 디자인 media 쿼리를 사용하면 된다 1234567891011121314const Box = styled.div` /*props로 넣어 준 값을 직접 전달해 줄 수 있습니다*/ background: ${(props) =&gt; props.color || &quot;blue&quot;}; padding: 1rem; display: flex; width: 1024px; margin: 0 auto; @media (max-width: 1024px) { width: 768px; } @media (max-width: 768px) { width: 100%; }`;","link":"/2022/03/06/react/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81/"},{"title":"자료구조 basic","text":"✅ 정의 대량의 데이터를 효율적으로 관리할 수 있도록 하는 데이터의 구조를 의미합니다. 데이터 특성에 따라서, 체계적인 데이터 구조화가 필요하며, 이러한 데이터 구조는 코드의 효율성, 성능을 결정합니다. ✅ 종류대표적인 자료구조로는 배열(Array), 스택(Stack), 큐(Queue), 링크드 리스트(Linked List), 해쉬 테이블(Hash Table), 힙(Heap) 등이 존재합니다. Python에서는 대표적으로 List, tuple, set, dictionary가 존재하며, 위의 자료구조 대부분을 모두 구현이 가능합니다. 🔥 스택 스택의 추상 자료형 (스택으로 무엇을 할 수 있는가?) 스택이 비어있는지 새로운 항목을 스택에 삽입 스택에서 하나의 항목을 꺼낸다 스택의 현재 개수 맨위 스택이 무엇인지 알려준다 스택을 깨끗이 비운다. 스택은 어디서 사용? 페이지 되돌리기 함수 호출에서 복귀 주소 괄호 닫기 계산기 프로그램 깊이 우선 탐색 🔥 큐 큐는 어디서 사용? 서비스 콜 센터 콜큐 인쇄 작업 큐 버퍼링 시뮬레이션 이진트리의 레벨 순회, 기수정렬에서 레코드의 정렬, 너비우선탐색 🔥 덱 큐의 front 와 rear에서 모두 삽입 삭제가 가능한 큐 🔥 우선순위 큐 모든 데이터가 우선순위를 가지고 있고, 들어온 순서와 상관없이 우선순위가 높은 데이터가 먼저 출력되는 구조 우선순위 큐는 “우선순위”에 따라 스택이나 큐로 얼마든지 사용 우선순위 큐 주요 응용 허프만 코딩 트리 크루스칼 최소비용 신장트리 알고리즘 다익스트라 최단거리 알고리즘 상태공간트리","link":"/2022/01/14/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-basic/"}],"tags":[],"categories":[{"name":"http","slug":"http","link":"/categories/http/"},{"name":"Interactive","slug":"Interactive","link":"/categories/Interactive/"},{"name":"React","slug":"React","link":"/categories/React/"},{"name":"Document","slug":"React/Document","link":"/categories/React/Document/"},{"name":"자료구조","slug":"자료구조","link":"/categories/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"}]}